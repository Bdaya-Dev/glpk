// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to GLPK (http://www.gnu.org/software/glpk/)
class GLPK_C {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  GLPK_C(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<glp_prob> glp_create_prob() {
    return (_glp_create_prob ??=
        _dylib.lookupFunction<_c_glp_create_prob, _dart_glp_create_prob>(
            'glp_create_prob'))();
  }

  _dart_glp_create_prob? _glp_create_prob;

  void glp_set_prob_name(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_prob_name ??=
        _dylib.lookupFunction<_c_glp_set_prob_name, _dart_glp_set_prob_name>(
            'glp_set_prob_name'))(
      P,
      name,
    );
  }

  _dart_glp_set_prob_name? _glp_set_prob_name;

  void glp_set_obj_name(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_obj_name ??=
        _dylib.lookupFunction<_c_glp_set_obj_name, _dart_glp_set_obj_name>(
            'glp_set_obj_name'))(
      P,
      name,
    );
  }

  _dart_glp_set_obj_name? _glp_set_obj_name;

  void glp_set_obj_dir(
    ffi.Pointer<glp_prob> P,
    int dir,
  ) {
    return (_glp_set_obj_dir ??=
        _dylib.lookupFunction<_c_glp_set_obj_dir, _dart_glp_set_obj_dir>(
            'glp_set_obj_dir'))(
      P,
      dir,
    );
  }

  _dart_glp_set_obj_dir? _glp_set_obj_dir;

  int glp_add_rows(
    ffi.Pointer<glp_prob> P,
    int nrs,
  ) {
    return (_glp_add_rows ??= _dylib
        .lookupFunction<_c_glp_add_rows, _dart_glp_add_rows>('glp_add_rows'))(
      P,
      nrs,
    );
  }

  _dart_glp_add_rows? _glp_add_rows;

  int glp_add_cols(
    ffi.Pointer<glp_prob> P,
    int ncs,
  ) {
    return (_glp_add_cols ??= _dylib
        .lookupFunction<_c_glp_add_cols, _dart_glp_add_cols>('glp_add_cols'))(
      P,
      ncs,
    );
  }

  _dart_glp_add_cols? _glp_add_cols;

  void glp_set_row_name(
    ffi.Pointer<glp_prob> P,
    int i,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_row_name ??=
        _dylib.lookupFunction<_c_glp_set_row_name, _dart_glp_set_row_name>(
            'glp_set_row_name'))(
      P,
      i,
      name,
    );
  }

  _dart_glp_set_row_name? _glp_set_row_name;

  void glp_set_col_name(
    ffi.Pointer<glp_prob> P,
    int j,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_col_name ??=
        _dylib.lookupFunction<_c_glp_set_col_name, _dart_glp_set_col_name>(
            'glp_set_col_name'))(
      P,
      j,
      name,
    );
  }

  _dart_glp_set_col_name? _glp_set_col_name;

  void glp_set_row_bnds(
    ffi.Pointer<glp_prob> P,
    int i,
    int type,
    double lb,
    double ub,
  ) {
    return (_glp_set_row_bnds ??=
        _dylib.lookupFunction<_c_glp_set_row_bnds, _dart_glp_set_row_bnds>(
            'glp_set_row_bnds'))(
      P,
      i,
      type,
      lb,
      ub,
    );
  }

  _dart_glp_set_row_bnds? _glp_set_row_bnds;

  void glp_set_col_bnds(
    ffi.Pointer<glp_prob> P,
    int j,
    int type,
    double lb,
    double ub,
  ) {
    return (_glp_set_col_bnds ??=
        _dylib.lookupFunction<_c_glp_set_col_bnds, _dart_glp_set_col_bnds>(
            'glp_set_col_bnds'))(
      P,
      j,
      type,
      lb,
      ub,
    );
  }

  _dart_glp_set_col_bnds? _glp_set_col_bnds;

  void glp_set_obj_coef(
    ffi.Pointer<glp_prob> P,
    int j,
    double coef,
  ) {
    return (_glp_set_obj_coef ??=
        _dylib.lookupFunction<_c_glp_set_obj_coef, _dart_glp_set_obj_coef>(
            'glp_set_obj_coef'))(
      P,
      j,
      coef,
    );
  }

  _dart_glp_set_obj_coef? _glp_set_obj_coef;

  void glp_set_mat_row(
    ffi.Pointer<glp_prob> P,
    int i,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_set_mat_row ??=
        _dylib.lookupFunction<_c_glp_set_mat_row, _dart_glp_set_mat_row>(
            'glp_set_mat_row'))(
      P,
      i,
      len,
      ind,
      val,
    );
  }

  _dart_glp_set_mat_row? _glp_set_mat_row;

  void glp_set_mat_col(
    ffi.Pointer<glp_prob> P,
    int j,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_set_mat_col ??=
        _dylib.lookupFunction<_c_glp_set_mat_col, _dart_glp_set_mat_col>(
            'glp_set_mat_col'))(
      P,
      j,
      len,
      ind,
      val,
    );
  }

  _dart_glp_set_mat_col? _glp_set_mat_col;

  void glp_load_matrix(
    ffi.Pointer<glp_prob> P,
    int ne,
    ffi.Pointer<ffi.Int32> ia,
    ffi.Pointer<ffi.Int32> ja,
    ffi.Pointer<ffi.Double> ar,
  ) {
    return (_glp_load_matrix ??=
        _dylib.lookupFunction<_c_glp_load_matrix, _dart_glp_load_matrix>(
            'glp_load_matrix'))(
      P,
      ne,
      ia,
      ja,
      ar,
    );
  }

  _dart_glp_load_matrix? _glp_load_matrix;

  int glp_check_dup(
    int m,
    int n,
    int ne,
    ffi.Pointer<ffi.Int32> ia,
    ffi.Pointer<ffi.Int32> ja,
  ) {
    return (_glp_check_dup ??=
        _dylib.lookupFunction<_c_glp_check_dup, _dart_glp_check_dup>(
            'glp_check_dup'))(
      m,
      n,
      ne,
      ia,
      ja,
    );
  }

  _dart_glp_check_dup? _glp_check_dup;

  void glp_sort_matrix(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_sort_matrix ??=
        _dylib.lookupFunction<_c_glp_sort_matrix, _dart_glp_sort_matrix>(
            'glp_sort_matrix'))(
      P,
    );
  }

  _dart_glp_sort_matrix? _glp_sort_matrix;

  void glp_del_rows(
    ffi.Pointer<glp_prob> P,
    int nrs,
    ffi.Pointer<ffi.Int32> num,
  ) {
    return (_glp_del_rows ??= _dylib
        .lookupFunction<_c_glp_del_rows, _dart_glp_del_rows>('glp_del_rows'))(
      P,
      nrs,
      num,
    );
  }

  _dart_glp_del_rows? _glp_del_rows;

  void glp_del_cols(
    ffi.Pointer<glp_prob> P,
    int ncs,
    ffi.Pointer<ffi.Int32> num,
  ) {
    return (_glp_del_cols ??= _dylib
        .lookupFunction<_c_glp_del_cols, _dart_glp_del_cols>('glp_del_cols'))(
      P,
      ncs,
      num,
    );
  }

  _dart_glp_del_cols? _glp_del_cols;

  void glp_copy_prob(
    ffi.Pointer<glp_prob> dest,
    ffi.Pointer<glp_prob> prob,
    int names,
  ) {
    return (_glp_copy_prob ??=
        _dylib.lookupFunction<_c_glp_copy_prob, _dart_glp_copy_prob>(
            'glp_copy_prob'))(
      dest,
      prob,
      names,
    );
  }

  _dart_glp_copy_prob? _glp_copy_prob;

  void glp_erase_prob(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_erase_prob ??=
        _dylib.lookupFunction<_c_glp_erase_prob, _dart_glp_erase_prob>(
            'glp_erase_prob'))(
      P,
    );
  }

  _dart_glp_erase_prob? _glp_erase_prob;

  void glp_delete_prob(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_delete_prob ??=
        _dylib.lookupFunction<_c_glp_delete_prob, _dart_glp_delete_prob>(
            'glp_delete_prob'))(
      P,
    );
  }

  _dart_glp_delete_prob? _glp_delete_prob;

  ffi.Pointer<ffi.Int8> glp_get_prob_name(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_prob_name ??=
        _dylib.lookupFunction<_c_glp_get_prob_name, _dart_glp_get_prob_name>(
            'glp_get_prob_name'))(
      P,
    );
  }

  _dart_glp_get_prob_name? _glp_get_prob_name;

  ffi.Pointer<ffi.Int8> glp_get_obj_name(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_obj_name ??=
        _dylib.lookupFunction<_c_glp_get_obj_name, _dart_glp_get_obj_name>(
            'glp_get_obj_name'))(
      P,
    );
  }

  _dart_glp_get_obj_name? _glp_get_obj_name;

  int glp_get_obj_dir(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_obj_dir ??=
        _dylib.lookupFunction<_c_glp_get_obj_dir, _dart_glp_get_obj_dir>(
            'glp_get_obj_dir'))(
      P,
    );
  }

  _dart_glp_get_obj_dir? _glp_get_obj_dir;

  int glp_get_num_rows(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_num_rows ??=
        _dylib.lookupFunction<_c_glp_get_num_rows, _dart_glp_get_num_rows>(
            'glp_get_num_rows'))(
      P,
    );
  }

  _dart_glp_get_num_rows? _glp_get_num_rows;

  int glp_get_num_cols(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_num_cols ??=
        _dylib.lookupFunction<_c_glp_get_num_cols, _dart_glp_get_num_cols>(
            'glp_get_num_cols'))(
      P,
    );
  }

  _dart_glp_get_num_cols? _glp_get_num_cols;

  ffi.Pointer<ffi.Int8> glp_get_row_name(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_name ??=
        _dylib.lookupFunction<_c_glp_get_row_name, _dart_glp_get_row_name>(
            'glp_get_row_name'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_name? _glp_get_row_name;

  ffi.Pointer<ffi.Int8> glp_get_col_name(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_name ??=
        _dylib.lookupFunction<_c_glp_get_col_name, _dart_glp_get_col_name>(
            'glp_get_col_name'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_name? _glp_get_col_name;

  int glp_get_row_type(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_type ??=
        _dylib.lookupFunction<_c_glp_get_row_type, _dart_glp_get_row_type>(
            'glp_get_row_type'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_type? _glp_get_row_type;

  double glp_get_row_lb(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_lb ??=
        _dylib.lookupFunction<_c_glp_get_row_lb, _dart_glp_get_row_lb>(
            'glp_get_row_lb'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_lb? _glp_get_row_lb;

  double glp_get_row_ub(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_ub ??=
        _dylib.lookupFunction<_c_glp_get_row_ub, _dart_glp_get_row_ub>(
            'glp_get_row_ub'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_ub? _glp_get_row_ub;

  int glp_get_col_type(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_type ??=
        _dylib.lookupFunction<_c_glp_get_col_type, _dart_glp_get_col_type>(
            'glp_get_col_type'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_type? _glp_get_col_type;

  double glp_get_col_lb(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_lb ??=
        _dylib.lookupFunction<_c_glp_get_col_lb, _dart_glp_get_col_lb>(
            'glp_get_col_lb'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_lb? _glp_get_col_lb;

  double glp_get_col_ub(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_ub ??=
        _dylib.lookupFunction<_c_glp_get_col_ub, _dart_glp_get_col_ub>(
            'glp_get_col_ub'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_ub? _glp_get_col_ub;

  double glp_get_obj_coef(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_obj_coef ??=
        _dylib.lookupFunction<_c_glp_get_obj_coef, _dart_glp_get_obj_coef>(
            'glp_get_obj_coef'))(
      P,
      j,
    );
  }

  _dart_glp_get_obj_coef? _glp_get_obj_coef;

  int glp_get_num_nz(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_num_nz ??=
        _dylib.lookupFunction<_c_glp_get_num_nz, _dart_glp_get_num_nz>(
            'glp_get_num_nz'))(
      P,
    );
  }

  _dart_glp_get_num_nz? _glp_get_num_nz;

  int glp_get_mat_row(
    ffi.Pointer<glp_prob> P,
    int i,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_get_mat_row ??=
        _dylib.lookupFunction<_c_glp_get_mat_row, _dart_glp_get_mat_row>(
            'glp_get_mat_row'))(
      P,
      i,
      ind,
      val,
    );
  }

  _dart_glp_get_mat_row? _glp_get_mat_row;

  int glp_get_mat_col(
    ffi.Pointer<glp_prob> P,
    int j,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_get_mat_col ??=
        _dylib.lookupFunction<_c_glp_get_mat_col, _dart_glp_get_mat_col>(
            'glp_get_mat_col'))(
      P,
      j,
      ind,
      val,
    );
  }

  _dart_glp_get_mat_col? _glp_get_mat_col;

  void glp_create_index(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_create_index ??=
        _dylib.lookupFunction<_c_glp_create_index, _dart_glp_create_index>(
            'glp_create_index'))(
      P,
    );
  }

  _dart_glp_create_index? _glp_create_index;

  int glp_find_row(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_find_row ??= _dylib
        .lookupFunction<_c_glp_find_row, _dart_glp_find_row>('glp_find_row'))(
      P,
      name,
    );
  }

  _dart_glp_find_row? _glp_find_row;

  int glp_find_col(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_find_col ??= _dylib
        .lookupFunction<_c_glp_find_col, _dart_glp_find_col>('glp_find_col'))(
      P,
      name,
    );
  }

  _dart_glp_find_col? _glp_find_col;

  void glp_delete_index(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_delete_index ??=
        _dylib.lookupFunction<_c_glp_delete_index, _dart_glp_delete_index>(
            'glp_delete_index'))(
      P,
    );
  }

  _dart_glp_delete_index? _glp_delete_index;

  void glp_set_rii(
    ffi.Pointer<glp_prob> P,
    int i,
    double rii,
  ) {
    return (_glp_set_rii ??= _dylib
        .lookupFunction<_c_glp_set_rii, _dart_glp_set_rii>('glp_set_rii'))(
      P,
      i,
      rii,
    );
  }

  _dart_glp_set_rii? _glp_set_rii;

  void glp_set_sjj(
    ffi.Pointer<glp_prob> P,
    int j,
    double sjj,
  ) {
    return (_glp_set_sjj ??= _dylib
        .lookupFunction<_c_glp_set_sjj, _dart_glp_set_sjj>('glp_set_sjj'))(
      P,
      j,
      sjj,
    );
  }

  _dart_glp_set_sjj? _glp_set_sjj;

  double glp_get_rii(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_rii ??= _dylib
        .lookupFunction<_c_glp_get_rii, _dart_glp_get_rii>('glp_get_rii'))(
      P,
      i,
    );
  }

  _dart_glp_get_rii? _glp_get_rii;

  double glp_get_sjj(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_sjj ??= _dylib
        .lookupFunction<_c_glp_get_sjj, _dart_glp_get_sjj>('glp_get_sjj'))(
      P,
      j,
    );
  }

  _dart_glp_get_sjj? _glp_get_sjj;

  void glp_scale_prob(
    ffi.Pointer<glp_prob> P,
    int flags,
  ) {
    return (_glp_scale_prob ??=
        _dylib.lookupFunction<_c_glp_scale_prob, _dart_glp_scale_prob>(
            'glp_scale_prob'))(
      P,
      flags,
    );
  }

  _dart_glp_scale_prob? _glp_scale_prob;

  void glp_unscale_prob(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_unscale_prob ??=
        _dylib.lookupFunction<_c_glp_unscale_prob, _dart_glp_unscale_prob>(
            'glp_unscale_prob'))(
      P,
    );
  }

  _dart_glp_unscale_prob? _glp_unscale_prob;

  void glp_set_row_stat(
    ffi.Pointer<glp_prob> P,
    int i,
    int stat,
  ) {
    return (_glp_set_row_stat ??=
        _dylib.lookupFunction<_c_glp_set_row_stat, _dart_glp_set_row_stat>(
            'glp_set_row_stat'))(
      P,
      i,
      stat,
    );
  }

  _dart_glp_set_row_stat? _glp_set_row_stat;

  void glp_set_col_stat(
    ffi.Pointer<glp_prob> P,
    int j,
    int stat,
  ) {
    return (_glp_set_col_stat ??=
        _dylib.lookupFunction<_c_glp_set_col_stat, _dart_glp_set_col_stat>(
            'glp_set_col_stat'))(
      P,
      j,
      stat,
    );
  }

  _dart_glp_set_col_stat? _glp_set_col_stat;

  void glp_std_basis(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_std_basis ??=
        _dylib.lookupFunction<_c_glp_std_basis, _dart_glp_std_basis>(
            'glp_std_basis'))(
      P,
    );
  }

  _dart_glp_std_basis? _glp_std_basis;

  void glp_adv_basis(
    ffi.Pointer<glp_prob> P,
    int flags,
  ) {
    return (_glp_adv_basis ??=
        _dylib.lookupFunction<_c_glp_adv_basis, _dart_glp_adv_basis>(
            'glp_adv_basis'))(
      P,
      flags,
    );
  }

  _dart_glp_adv_basis? _glp_adv_basis;

  void glp_cpx_basis(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_cpx_basis ??=
        _dylib.lookupFunction<_c_glp_cpx_basis, _dart_glp_cpx_basis>(
            'glp_cpx_basis'))(
      P,
    );
  }

  _dart_glp_cpx_basis? _glp_cpx_basis;

  int glp_simplex(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_smcp> parm,
  ) {
    return (_glp_simplex ??= _dylib
        .lookupFunction<_c_glp_simplex, _dart_glp_simplex>('glp_simplex'))(
      P,
      parm,
    );
  }

  _dart_glp_simplex? _glp_simplex;

  int glp_exact(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_smcp> parm,
  ) {
    return (_glp_exact ??=
        _dylib.lookupFunction<_c_glp_exact, _dart_glp_exact>('glp_exact'))(
      P,
      parm,
    );
  }

  _dart_glp_exact? _glp_exact;

  void glp_init_smcp(
    ffi.Pointer<glp_smcp> parm,
  ) {
    return (_glp_init_smcp ??=
        _dylib.lookupFunction<_c_glp_init_smcp, _dart_glp_init_smcp>(
            'glp_init_smcp'))(
      parm,
    );
  }

  _dart_glp_init_smcp? _glp_init_smcp;

  int glp_get_status(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_status ??=
        _dylib.lookupFunction<_c_glp_get_status, _dart_glp_get_status>(
            'glp_get_status'))(
      P,
    );
  }

  _dart_glp_get_status? _glp_get_status;

  int glp_get_prim_stat(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_prim_stat ??=
        _dylib.lookupFunction<_c_glp_get_prim_stat, _dart_glp_get_prim_stat>(
            'glp_get_prim_stat'))(
      P,
    );
  }

  _dart_glp_get_prim_stat? _glp_get_prim_stat;

  int glp_get_dual_stat(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_dual_stat ??=
        _dylib.lookupFunction<_c_glp_get_dual_stat, _dart_glp_get_dual_stat>(
            'glp_get_dual_stat'))(
      P,
    );
  }

  _dart_glp_get_dual_stat? _glp_get_dual_stat;

  double glp_get_obj_val(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_obj_val ??=
        _dylib.lookupFunction<_c_glp_get_obj_val, _dart_glp_get_obj_val>(
            'glp_get_obj_val'))(
      P,
    );
  }

  _dart_glp_get_obj_val? _glp_get_obj_val;

  int glp_get_row_stat(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_stat ??=
        _dylib.lookupFunction<_c_glp_get_row_stat, _dart_glp_get_row_stat>(
            'glp_get_row_stat'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_stat? _glp_get_row_stat;

  double glp_get_row_prim(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_prim ??=
        _dylib.lookupFunction<_c_glp_get_row_prim, _dart_glp_get_row_prim>(
            'glp_get_row_prim'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_prim? _glp_get_row_prim;

  double glp_get_row_dual(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_dual ??=
        _dylib.lookupFunction<_c_glp_get_row_dual, _dart_glp_get_row_dual>(
            'glp_get_row_dual'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_dual? _glp_get_row_dual;

  int glp_get_col_stat(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_stat ??=
        _dylib.lookupFunction<_c_glp_get_col_stat, _dart_glp_get_col_stat>(
            'glp_get_col_stat'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_stat? _glp_get_col_stat;

  double glp_get_col_prim(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_prim ??=
        _dylib.lookupFunction<_c_glp_get_col_prim, _dart_glp_get_col_prim>(
            'glp_get_col_prim'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_prim? _glp_get_col_prim;

  double glp_get_col_dual(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_dual ??=
        _dylib.lookupFunction<_c_glp_get_col_dual, _dart_glp_get_col_dual>(
            'glp_get_col_dual'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_dual? _glp_get_col_dual;

  int glp_get_unbnd_ray(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_unbnd_ray ??=
        _dylib.lookupFunction<_c_glp_get_unbnd_ray, _dart_glp_get_unbnd_ray>(
            'glp_get_unbnd_ray'))(
      P,
    );
  }

  _dart_glp_get_unbnd_ray? _glp_get_unbnd_ray;

  int glp_get_it_cnt(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_it_cnt ??=
        _dylib.lookupFunction<_c_glp_get_it_cnt, _dart_glp_get_it_cnt>(
            'glp_get_it_cnt'))(
      P,
    );
  }

  _dart_glp_get_it_cnt? _glp_get_it_cnt;

  void glp_set_it_cnt(
    ffi.Pointer<glp_prob> P,
    int it_cnt,
  ) {
    return (_glp_set_it_cnt ??=
        _dylib.lookupFunction<_c_glp_set_it_cnt, _dart_glp_set_it_cnt>(
            'glp_set_it_cnt'))(
      P,
      it_cnt,
    );
  }

  _dart_glp_set_it_cnt? _glp_set_it_cnt;

  int glp_interior(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_iptcp> parm,
  ) {
    return (_glp_interior ??= _dylib
        .lookupFunction<_c_glp_interior, _dart_glp_interior>('glp_interior'))(
      P,
      parm,
    );
  }

  _dart_glp_interior? _glp_interior;

  void glp_init_iptcp(
    ffi.Pointer<glp_iptcp> parm,
  ) {
    return (_glp_init_iptcp ??=
        _dylib.lookupFunction<_c_glp_init_iptcp, _dart_glp_init_iptcp>(
            'glp_init_iptcp'))(
      parm,
    );
  }

  _dart_glp_init_iptcp? _glp_init_iptcp;

  int glp_ipt_status(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_ipt_status ??=
        _dylib.lookupFunction<_c_glp_ipt_status, _dart_glp_ipt_status>(
            'glp_ipt_status'))(
      P,
    );
  }

  _dart_glp_ipt_status? _glp_ipt_status;

  double glp_ipt_obj_val(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_ipt_obj_val ??=
        _dylib.lookupFunction<_c_glp_ipt_obj_val, _dart_glp_ipt_obj_val>(
            'glp_ipt_obj_val'))(
      P,
    );
  }

  _dart_glp_ipt_obj_val? _glp_ipt_obj_val;

  double glp_ipt_row_prim(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_ipt_row_prim ??=
        _dylib.lookupFunction<_c_glp_ipt_row_prim, _dart_glp_ipt_row_prim>(
            'glp_ipt_row_prim'))(
      P,
      i,
    );
  }

  _dart_glp_ipt_row_prim? _glp_ipt_row_prim;

  double glp_ipt_row_dual(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_ipt_row_dual ??=
        _dylib.lookupFunction<_c_glp_ipt_row_dual, _dart_glp_ipt_row_dual>(
            'glp_ipt_row_dual'))(
      P,
      i,
    );
  }

  _dart_glp_ipt_row_dual? _glp_ipt_row_dual;

  double glp_ipt_col_prim(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_ipt_col_prim ??=
        _dylib.lookupFunction<_c_glp_ipt_col_prim, _dart_glp_ipt_col_prim>(
            'glp_ipt_col_prim'))(
      P,
      j,
    );
  }

  _dart_glp_ipt_col_prim? _glp_ipt_col_prim;

  double glp_ipt_col_dual(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_ipt_col_dual ??=
        _dylib.lookupFunction<_c_glp_ipt_col_dual, _dart_glp_ipt_col_dual>(
            'glp_ipt_col_dual'))(
      P,
      j,
    );
  }

  _dart_glp_ipt_col_dual? _glp_ipt_col_dual;

  void glp_set_col_kind(
    ffi.Pointer<glp_prob> P,
    int j,
    int kind,
  ) {
    return (_glp_set_col_kind ??=
        _dylib.lookupFunction<_c_glp_set_col_kind, _dart_glp_set_col_kind>(
            'glp_set_col_kind'))(
      P,
      j,
      kind,
    );
  }

  _dart_glp_set_col_kind? _glp_set_col_kind;

  int glp_get_col_kind(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_kind ??=
        _dylib.lookupFunction<_c_glp_get_col_kind, _dart_glp_get_col_kind>(
            'glp_get_col_kind'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_kind? _glp_get_col_kind;

  int glp_get_num_int(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_num_int ??=
        _dylib.lookupFunction<_c_glp_get_num_int, _dart_glp_get_num_int>(
            'glp_get_num_int'))(
      P,
    );
  }

  _dart_glp_get_num_int? _glp_get_num_int;

  int glp_get_num_bin(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_get_num_bin ??=
        _dylib.lookupFunction<_c_glp_get_num_bin, _dart_glp_get_num_bin>(
            'glp_get_num_bin'))(
      P,
    );
  }

  _dart_glp_get_num_bin? _glp_get_num_bin;

  int glp_intopt(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_iocp> parm,
  ) {
    return (_glp_intopt ??=
        _dylib.lookupFunction<_c_glp_intopt, _dart_glp_intopt>('glp_intopt'))(
      P,
      parm,
    );
  }

  _dart_glp_intopt? _glp_intopt;

  void glp_init_iocp(
    ffi.Pointer<glp_iocp> parm,
  ) {
    return (_glp_init_iocp ??=
        _dylib.lookupFunction<_c_glp_init_iocp, _dart_glp_init_iocp>(
            'glp_init_iocp'))(
      parm,
    );
  }

  _dart_glp_init_iocp? _glp_init_iocp;

  int glp_mip_status(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_mip_status ??=
        _dylib.lookupFunction<_c_glp_mip_status, _dart_glp_mip_status>(
            'glp_mip_status'))(
      P,
    );
  }

  _dart_glp_mip_status? _glp_mip_status;

  double glp_mip_obj_val(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_mip_obj_val ??=
        _dylib.lookupFunction<_c_glp_mip_obj_val, _dart_glp_mip_obj_val>(
            'glp_mip_obj_val'))(
      P,
    );
  }

  _dart_glp_mip_obj_val? _glp_mip_obj_val;

  double glp_mip_row_val(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_mip_row_val ??=
        _dylib.lookupFunction<_c_glp_mip_row_val, _dart_glp_mip_row_val>(
            'glp_mip_row_val'))(
      P,
      i,
    );
  }

  _dart_glp_mip_row_val? _glp_mip_row_val;

  double glp_mip_col_val(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_mip_col_val ??=
        _dylib.lookupFunction<_c_glp_mip_col_val, _dart_glp_mip_col_val>(
            'glp_mip_col_val'))(
      P,
      j,
    );
  }

  _dart_glp_mip_col_val? _glp_mip_col_val;

  void glp_check_kkt(
    ffi.Pointer<glp_prob> P,
    int sol,
    int cond,
    ffi.Pointer<ffi.Double> ae_max,
    ffi.Pointer<ffi.Int32> ae_ind,
    ffi.Pointer<ffi.Double> re_max,
    ffi.Pointer<ffi.Int32> re_ind,
  ) {
    return (_glp_check_kkt ??=
        _dylib.lookupFunction<_c_glp_check_kkt, _dart_glp_check_kkt>(
            'glp_check_kkt'))(
      P,
      sol,
      cond,
      ae_max,
      ae_ind,
      re_max,
      re_ind,
    );
  }

  _dart_glp_check_kkt? _glp_check_kkt;

  int glp_print_sol(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_print_sol ??=
        _dylib.lookupFunction<_c_glp_print_sol, _dart_glp_print_sol>(
            'glp_print_sol'))(
      P,
      fname,
    );
  }

  _dart_glp_print_sol? _glp_print_sol;

  int glp_read_sol(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_sol ??= _dylib
        .lookupFunction<_c_glp_read_sol, _dart_glp_read_sol>('glp_read_sol'))(
      P,
      fname,
    );
  }

  _dart_glp_read_sol? _glp_read_sol;

  int glp_write_sol(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_sol ??=
        _dylib.lookupFunction<_c_glp_write_sol, _dart_glp_write_sol>(
            'glp_write_sol'))(
      P,
      fname,
    );
  }

  _dart_glp_write_sol? _glp_write_sol;

  int glp_print_ranges(
    ffi.Pointer<glp_prob> P,
    int len,
    ffi.Pointer<ffi.Int32> list,
    int flags,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_print_ranges ??=
        _dylib.lookupFunction<_c_glp_print_ranges, _dart_glp_print_ranges>(
            'glp_print_ranges'))(
      P,
      len,
      list,
      flags,
      fname,
    );
  }

  _dart_glp_print_ranges? _glp_print_ranges;

  int glp_print_ipt(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_print_ipt ??=
        _dylib.lookupFunction<_c_glp_print_ipt, _dart_glp_print_ipt>(
            'glp_print_ipt'))(
      P,
      fname,
    );
  }

  _dart_glp_print_ipt? _glp_print_ipt;

  int glp_read_ipt(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_ipt ??= _dylib
        .lookupFunction<_c_glp_read_ipt, _dart_glp_read_ipt>('glp_read_ipt'))(
      P,
      fname,
    );
  }

  _dart_glp_read_ipt? _glp_read_ipt;

  int glp_write_ipt(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_ipt ??=
        _dylib.lookupFunction<_c_glp_write_ipt, _dart_glp_write_ipt>(
            'glp_write_ipt'))(
      P,
      fname,
    );
  }

  _dart_glp_write_ipt? _glp_write_ipt;

  int glp_print_mip(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_print_mip ??=
        _dylib.lookupFunction<_c_glp_print_mip, _dart_glp_print_mip>(
            'glp_print_mip'))(
      P,
      fname,
    );
  }

  _dart_glp_print_mip? _glp_print_mip;

  int glp_read_mip(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_mip ??= _dylib
        .lookupFunction<_c_glp_read_mip, _dart_glp_read_mip>('glp_read_mip'))(
      P,
      fname,
    );
  }

  _dart_glp_read_mip? _glp_read_mip;

  int glp_write_mip(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_mip ??=
        _dylib.lookupFunction<_c_glp_write_mip, _dart_glp_write_mip>(
            'glp_write_mip'))(
      P,
      fname,
    );
  }

  _dart_glp_write_mip? _glp_write_mip;

  int glp_bf_exists(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_bf_exists ??=
        _dylib.lookupFunction<_c_glp_bf_exists, _dart_glp_bf_exists>(
            'glp_bf_exists'))(
      P,
    );
  }

  _dart_glp_bf_exists? _glp_bf_exists;

  int glp_factorize(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_factorize ??=
        _dylib.lookupFunction<_c_glp_factorize, _dart_glp_factorize>(
            'glp_factorize'))(
      P,
    );
  }

  _dart_glp_factorize? _glp_factorize;

  int glp_bf_updated(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_bf_updated ??=
        _dylib.lookupFunction<_c_glp_bf_updated, _dart_glp_bf_updated>(
            'glp_bf_updated'))(
      P,
    );
  }

  _dart_glp_bf_updated? _glp_bf_updated;

  void glp_get_bfcp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_bfcp> parm,
  ) {
    return (_glp_get_bfcp ??= _dylib
        .lookupFunction<_c_glp_get_bfcp, _dart_glp_get_bfcp>('glp_get_bfcp'))(
      P,
      parm,
    );
  }

  _dart_glp_get_bfcp? _glp_get_bfcp;

  void glp_set_bfcp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_bfcp> parm,
  ) {
    return (_glp_set_bfcp ??= _dylib
        .lookupFunction<_c_glp_set_bfcp, _dart_glp_set_bfcp>('glp_set_bfcp'))(
      P,
      parm,
    );
  }

  _dart_glp_set_bfcp? _glp_set_bfcp;

  int glp_get_bhead(
    ffi.Pointer<glp_prob> P,
    int k,
  ) {
    return (_glp_get_bhead ??=
        _dylib.lookupFunction<_c_glp_get_bhead, _dart_glp_get_bhead>(
            'glp_get_bhead'))(
      P,
      k,
    );
  }

  _dart_glp_get_bhead? _glp_get_bhead;

  int glp_get_row_bind(
    ffi.Pointer<glp_prob> P,
    int i,
  ) {
    return (_glp_get_row_bind ??=
        _dylib.lookupFunction<_c_glp_get_row_bind, _dart_glp_get_row_bind>(
            'glp_get_row_bind'))(
      P,
      i,
    );
  }

  _dart_glp_get_row_bind? _glp_get_row_bind;

  int glp_get_col_bind(
    ffi.Pointer<glp_prob> P,
    int j,
  ) {
    return (_glp_get_col_bind ??=
        _dylib.lookupFunction<_c_glp_get_col_bind, _dart_glp_get_col_bind>(
            'glp_get_col_bind'))(
      P,
      j,
    );
  }

  _dart_glp_get_col_bind? _glp_get_col_bind;

  void glp_ftran(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Double> x,
  ) {
    return (_glp_ftran ??=
        _dylib.lookupFunction<_c_glp_ftran, _dart_glp_ftran>('glp_ftran'))(
      P,
      x,
    );
  }

  _dart_glp_ftran? _glp_ftran;

  void glp_btran(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Double> x,
  ) {
    return (_glp_btran ??=
        _dylib.lookupFunction<_c_glp_btran, _dart_glp_btran>('glp_btran'))(
      P,
      x,
    );
  }

  _dart_glp_btran? _glp_btran;

  int glp_warm_up(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_warm_up ??= _dylib
        .lookupFunction<_c_glp_warm_up, _dart_glp_warm_up>('glp_warm_up'))(
      P,
    );
  }

  _dart_glp_warm_up? _glp_warm_up;

  int glp_eval_tab_row(
    ffi.Pointer<glp_prob> P,
    int k,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_eval_tab_row ??=
        _dylib.lookupFunction<_c_glp_eval_tab_row, _dart_glp_eval_tab_row>(
            'glp_eval_tab_row'))(
      P,
      k,
      ind,
      val,
    );
  }

  _dart_glp_eval_tab_row? _glp_eval_tab_row;

  int glp_eval_tab_col(
    ffi.Pointer<glp_prob> P,
    int k,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_eval_tab_col ??=
        _dylib.lookupFunction<_c_glp_eval_tab_col, _dart_glp_eval_tab_col>(
            'glp_eval_tab_col'))(
      P,
      k,
      ind,
      val,
    );
  }

  _dart_glp_eval_tab_col? _glp_eval_tab_col;

  int glp_transform_row(
    ffi.Pointer<glp_prob> P,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_transform_row ??=
        _dylib.lookupFunction<_c_glp_transform_row, _dart_glp_transform_row>(
            'glp_transform_row'))(
      P,
      len,
      ind,
      val,
    );
  }

  _dart_glp_transform_row? _glp_transform_row;

  int glp_transform_col(
    ffi.Pointer<glp_prob> P,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
  ) {
    return (_glp_transform_col ??=
        _dylib.lookupFunction<_c_glp_transform_col, _dart_glp_transform_col>(
            'glp_transform_col'))(
      P,
      len,
      ind,
      val,
    );
  }

  _dart_glp_transform_col? _glp_transform_col;

  int glp_prim_rtest(
    ffi.Pointer<glp_prob> P,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
    int dir,
    double eps,
  ) {
    return (_glp_prim_rtest ??=
        _dylib.lookupFunction<_c_glp_prim_rtest, _dart_glp_prim_rtest>(
            'glp_prim_rtest'))(
      P,
      len,
      ind,
      val,
      dir,
      eps,
    );
  }

  _dart_glp_prim_rtest? _glp_prim_rtest;

  int glp_dual_rtest(
    ffi.Pointer<glp_prob> P,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
    int dir,
    double eps,
  ) {
    return (_glp_dual_rtest ??=
        _dylib.lookupFunction<_c_glp_dual_rtest, _dart_glp_dual_rtest>(
            'glp_dual_rtest'))(
      P,
      len,
      ind,
      val,
      dir,
      eps,
    );
  }

  _dart_glp_dual_rtest? _glp_dual_rtest;

  void glp_analyze_bound(
    ffi.Pointer<glp_prob> P,
    int k,
    ffi.Pointer<ffi.Double> value1,
    ffi.Pointer<ffi.Int32> var1,
    ffi.Pointer<ffi.Double> value2,
    ffi.Pointer<ffi.Int32> var2,
  ) {
    return (_glp_analyze_bound ??=
        _dylib.lookupFunction<_c_glp_analyze_bound, _dart_glp_analyze_bound>(
            'glp_analyze_bound'))(
      P,
      k,
      value1,
      var1,
      value2,
      var2,
    );
  }

  _dart_glp_analyze_bound? _glp_analyze_bound;

  void glp_analyze_coef(
    ffi.Pointer<glp_prob> P,
    int k,
    ffi.Pointer<ffi.Double> coef1,
    ffi.Pointer<ffi.Int32> var1,
    ffi.Pointer<ffi.Double> value1,
    ffi.Pointer<ffi.Double> coef2,
    ffi.Pointer<ffi.Int32> var2,
    ffi.Pointer<ffi.Double> value2,
  ) {
    return (_glp_analyze_coef ??=
        _dylib.lookupFunction<_c_glp_analyze_coef, _dart_glp_analyze_coef>(
            'glp_analyze_coef'))(
      P,
      k,
      coef1,
      var1,
      value1,
      coef2,
      var2,
      value2,
    );
  }

  _dart_glp_analyze_coef? _glp_analyze_coef;

  ffi.Pointer<glp_prep> glp_npp_alloc_wksp() {
    return (_glp_npp_alloc_wksp ??=
        _dylib.lookupFunction<_c_glp_npp_alloc_wksp, _dart_glp_npp_alloc_wksp>(
            'glp_npp_alloc_wksp'))();
  }

  _dart_glp_npp_alloc_wksp? _glp_npp_alloc_wksp;

  void glp_npp_load_prob(
    ffi.Pointer<glp_prep> prep,
    ffi.Pointer<glp_prob> P,
    int sol,
    int names,
  ) {
    return (_glp_npp_load_prob ??=
        _dylib.lookupFunction<_c_glp_npp_load_prob, _dart_glp_npp_load_prob>(
            'glp_npp_load_prob'))(
      prep,
      P,
      sol,
      names,
    );
  }

  _dart_glp_npp_load_prob? _glp_npp_load_prob;

  int glp_npp_preprocess1(
    ffi.Pointer<glp_prep> prep,
    int hard,
  ) {
    return (_glp_npp_preprocess1 ??= _dylib.lookupFunction<
        _c_glp_npp_preprocess1,
        _dart_glp_npp_preprocess1>('glp_npp_preprocess1'))(
      prep,
      hard,
    );
  }

  _dart_glp_npp_preprocess1? _glp_npp_preprocess1;

  void glp_npp_build_prob(
    ffi.Pointer<glp_prep> prep,
    ffi.Pointer<glp_prob> Q,
  ) {
    return (_glp_npp_build_prob ??=
        _dylib.lookupFunction<_c_glp_npp_build_prob, _dart_glp_npp_build_prob>(
            'glp_npp_build_prob'))(
      prep,
      Q,
    );
  }

  _dart_glp_npp_build_prob? _glp_npp_build_prob;

  void glp_npp_postprocess(
    ffi.Pointer<glp_prep> prep,
    ffi.Pointer<glp_prob> Q,
  ) {
    return (_glp_npp_postprocess ??= _dylib.lookupFunction<
        _c_glp_npp_postprocess,
        _dart_glp_npp_postprocess>('glp_npp_postprocess'))(
      prep,
      Q,
    );
  }

  _dart_glp_npp_postprocess? _glp_npp_postprocess;

  void glp_npp_obtain_sol(
    ffi.Pointer<glp_prep> prep,
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_npp_obtain_sol ??=
        _dylib.lookupFunction<_c_glp_npp_obtain_sol, _dart_glp_npp_obtain_sol>(
            'glp_npp_obtain_sol'))(
      prep,
      P,
    );
  }

  _dart_glp_npp_obtain_sol? _glp_npp_obtain_sol;

  void glp_npp_free_wksp(
    ffi.Pointer<glp_prep> prep,
  ) {
    return (_glp_npp_free_wksp ??=
        _dylib.lookupFunction<_c_glp_npp_free_wksp, _dart_glp_npp_free_wksp>(
            'glp_npp_free_wksp'))(
      prep,
    );
  }

  _dart_glp_npp_free_wksp? _glp_npp_free_wksp;

  int glp_ios_reason(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_reason ??=
        _dylib.lookupFunction<_c_glp_ios_reason, _dart_glp_ios_reason>(
            'glp_ios_reason'))(
      T,
    );
  }

  _dart_glp_ios_reason? _glp_ios_reason;

  ffi.Pointer<glp_prob> glp_ios_get_prob(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_get_prob ??=
        _dylib.lookupFunction<_c_glp_ios_get_prob, _dart_glp_ios_get_prob>(
            'glp_ios_get_prob'))(
      T,
    );
  }

  _dart_glp_ios_get_prob? _glp_ios_get_prob;

  void glp_ios_tree_size(
    ffi.Pointer<glp_tree> T,
    ffi.Pointer<ffi.Int32> a_cnt,
    ffi.Pointer<ffi.Int32> n_cnt,
    ffi.Pointer<ffi.Int32> t_cnt,
  ) {
    return (_glp_ios_tree_size ??=
        _dylib.lookupFunction<_c_glp_ios_tree_size, _dart_glp_ios_tree_size>(
            'glp_ios_tree_size'))(
      T,
      a_cnt,
      n_cnt,
      t_cnt,
    );
  }

  _dart_glp_ios_tree_size? _glp_ios_tree_size;

  int glp_ios_curr_node(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_curr_node ??=
        _dylib.lookupFunction<_c_glp_ios_curr_node, _dart_glp_ios_curr_node>(
            'glp_ios_curr_node'))(
      T,
    );
  }

  _dart_glp_ios_curr_node? _glp_ios_curr_node;

  int glp_ios_next_node(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_next_node ??=
        _dylib.lookupFunction<_c_glp_ios_next_node, _dart_glp_ios_next_node>(
            'glp_ios_next_node'))(
      T,
      p,
    );
  }

  _dart_glp_ios_next_node? _glp_ios_next_node;

  int glp_ios_prev_node(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_prev_node ??=
        _dylib.lookupFunction<_c_glp_ios_prev_node, _dart_glp_ios_prev_node>(
            'glp_ios_prev_node'))(
      T,
      p,
    );
  }

  _dart_glp_ios_prev_node? _glp_ios_prev_node;

  int glp_ios_up_node(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_up_node ??=
        _dylib.lookupFunction<_c_glp_ios_up_node, _dart_glp_ios_up_node>(
            'glp_ios_up_node'))(
      T,
      p,
    );
  }

  _dart_glp_ios_up_node? _glp_ios_up_node;

  int glp_ios_node_level(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_node_level ??=
        _dylib.lookupFunction<_c_glp_ios_node_level, _dart_glp_ios_node_level>(
            'glp_ios_node_level'))(
      T,
      p,
    );
  }

  _dart_glp_ios_node_level? _glp_ios_node_level;

  double glp_ios_node_bound(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_node_bound ??=
        _dylib.lookupFunction<_c_glp_ios_node_bound, _dart_glp_ios_node_bound>(
            'glp_ios_node_bound'))(
      T,
      p,
    );
  }

  _dart_glp_ios_node_bound? _glp_ios_node_bound;

  int glp_ios_best_node(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_best_node ??=
        _dylib.lookupFunction<_c_glp_ios_best_node, _dart_glp_ios_best_node>(
            'glp_ios_best_node'))(
      T,
    );
  }

  _dart_glp_ios_best_node? _glp_ios_best_node;

  double glp_ios_mip_gap(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_mip_gap ??=
        _dylib.lookupFunction<_c_glp_ios_mip_gap, _dart_glp_ios_mip_gap>(
            'glp_ios_mip_gap'))(
      T,
    );
  }

  _dart_glp_ios_mip_gap? _glp_ios_mip_gap;

  ffi.Pointer<ffi.Void> glp_ios_node_data(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_node_data ??=
        _dylib.lookupFunction<_c_glp_ios_node_data, _dart_glp_ios_node_data>(
            'glp_ios_node_data'))(
      T,
      p,
    );
  }

  _dart_glp_ios_node_data? _glp_ios_node_data;

  void glp_ios_row_attr(
    ffi.Pointer<glp_tree> T,
    int i,
    ffi.Pointer<glp_attr> attr,
  ) {
    return (_glp_ios_row_attr ??=
        _dylib.lookupFunction<_c_glp_ios_row_attr, _dart_glp_ios_row_attr>(
            'glp_ios_row_attr'))(
      T,
      i,
      attr,
    );
  }

  _dart_glp_ios_row_attr? _glp_ios_row_attr;

  int glp_ios_pool_size(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_pool_size ??=
        _dylib.lookupFunction<_c_glp_ios_pool_size, _dart_glp_ios_pool_size>(
            'glp_ios_pool_size'))(
      T,
    );
  }

  _dart_glp_ios_pool_size? _glp_ios_pool_size;

  int glp_ios_add_row(
    ffi.Pointer<glp_tree> T,
    ffi.Pointer<ffi.Int8> name,
    int klass,
    int flags,
    int len,
    ffi.Pointer<ffi.Int32> ind,
    ffi.Pointer<ffi.Double> val,
    int type,
    double rhs,
  ) {
    return (_glp_ios_add_row ??=
        _dylib.lookupFunction<_c_glp_ios_add_row, _dart_glp_ios_add_row>(
            'glp_ios_add_row'))(
      T,
      name,
      klass,
      flags,
      len,
      ind,
      val,
      type,
      rhs,
    );
  }

  _dart_glp_ios_add_row? _glp_ios_add_row;

  void glp_ios_del_row(
    ffi.Pointer<glp_tree> T,
    int i,
  ) {
    return (_glp_ios_del_row ??=
        _dylib.lookupFunction<_c_glp_ios_del_row, _dart_glp_ios_del_row>(
            'glp_ios_del_row'))(
      T,
      i,
    );
  }

  _dart_glp_ios_del_row? _glp_ios_del_row;

  void glp_ios_clear_pool(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_clear_pool ??=
        _dylib.lookupFunction<_c_glp_ios_clear_pool, _dart_glp_ios_clear_pool>(
            'glp_ios_clear_pool'))(
      T,
    );
  }

  _dart_glp_ios_clear_pool? _glp_ios_clear_pool;

  int glp_ios_can_branch(
    ffi.Pointer<glp_tree> T,
    int j,
  ) {
    return (_glp_ios_can_branch ??=
        _dylib.lookupFunction<_c_glp_ios_can_branch, _dart_glp_ios_can_branch>(
            'glp_ios_can_branch'))(
      T,
      j,
    );
  }

  _dart_glp_ios_can_branch? _glp_ios_can_branch;

  void glp_ios_branch_upon(
    ffi.Pointer<glp_tree> T,
    int j,
    int sel,
  ) {
    return (_glp_ios_branch_upon ??= _dylib.lookupFunction<
        _c_glp_ios_branch_upon,
        _dart_glp_ios_branch_upon>('glp_ios_branch_upon'))(
      T,
      j,
      sel,
    );
  }

  _dart_glp_ios_branch_upon? _glp_ios_branch_upon;

  void glp_ios_select_node(
    ffi.Pointer<glp_tree> T,
    int p,
  ) {
    return (_glp_ios_select_node ??= _dylib.lookupFunction<
        _c_glp_ios_select_node,
        _dart_glp_ios_select_node>('glp_ios_select_node'))(
      T,
      p,
    );
  }

  _dart_glp_ios_select_node? _glp_ios_select_node;

  int glp_ios_heur_sol(
    ffi.Pointer<glp_tree> T,
    ffi.Pointer<ffi.Double> x,
  ) {
    return (_glp_ios_heur_sol ??=
        _dylib.lookupFunction<_c_glp_ios_heur_sol, _dart_glp_ios_heur_sol>(
            'glp_ios_heur_sol'))(
      T,
      x,
    );
  }

  _dart_glp_ios_heur_sol? _glp_ios_heur_sol;

  void glp_ios_terminate(
    ffi.Pointer<glp_tree> T,
  ) {
    return (_glp_ios_terminate ??=
        _dylib.lookupFunction<_c_glp_ios_terminate, _dart_glp_ios_terminate>(
            'glp_ios_terminate'))(
      T,
    );
  }

  _dart_glp_ios_terminate? _glp_ios_terminate;

  void glp_init_mpscp(
    ffi.Pointer<glp_mpscp> parm,
  ) {
    return (_glp_init_mpscp ??=
        _dylib.lookupFunction<_c_glp_init_mpscp, _dart_glp_init_mpscp>(
            'glp_init_mpscp'))(
      parm,
    );
  }

  _dart_glp_init_mpscp? _glp_init_mpscp;

  int glp_read_mps(
    ffi.Pointer<glp_prob> P,
    int fmt,
    ffi.Pointer<glp_mpscp> parm,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_mps ??= _dylib
        .lookupFunction<_c_glp_read_mps, _dart_glp_read_mps>('glp_read_mps'))(
      P,
      fmt,
      parm,
      fname,
    );
  }

  _dart_glp_read_mps? _glp_read_mps;

  int glp_write_mps(
    ffi.Pointer<glp_prob> P,
    int fmt,
    ffi.Pointer<glp_mpscp> parm,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_mps ??=
        _dylib.lookupFunction<_c_glp_write_mps, _dart_glp_write_mps>(
            'glp_write_mps'))(
      P,
      fmt,
      parm,
      fname,
    );
  }

  _dart_glp_write_mps? _glp_write_mps;

  void glp_init_cpxcp(
    ffi.Pointer<glp_cpxcp> parm,
  ) {
    return (_glp_init_cpxcp ??=
        _dylib.lookupFunction<_c_glp_init_cpxcp, _dart_glp_init_cpxcp>(
            'glp_init_cpxcp'))(
      parm,
    );
  }

  _dart_glp_init_cpxcp? _glp_init_cpxcp;

  int glp_read_lp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_cpxcp> parm,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_lp ??= _dylib
        .lookupFunction<_c_glp_read_lp, _dart_glp_read_lp>('glp_read_lp'))(
      P,
      parm,
      fname,
    );
  }

  _dart_glp_read_lp? _glp_read_lp;

  int glp_write_lp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_cpxcp> parm,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_lp ??= _dylib
        .lookupFunction<_c_glp_write_lp, _dart_glp_write_lp>('glp_write_lp'))(
      P,
      parm,
      fname,
    );
  }

  _dart_glp_write_lp? _glp_write_lp;

  int glp_read_prob(
    ffi.Pointer<glp_prob> P,
    int flags,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_prob ??=
        _dylib.lookupFunction<_c_glp_read_prob, _dart_glp_read_prob>(
            'glp_read_prob'))(
      P,
      flags,
      fname,
    );
  }

  _dart_glp_read_prob? _glp_read_prob;

  int glp_write_prob(
    ffi.Pointer<glp_prob> P,
    int flags,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_prob ??=
        _dylib.lookupFunction<_c_glp_write_prob, _dart_glp_write_prob>(
            'glp_write_prob'))(
      P,
      flags,
      fname,
    );
  }

  _dart_glp_write_prob? _glp_write_prob;

  ffi.Pointer<glp_tran> glp_mpl_alloc_wksp() {
    return (_glp_mpl_alloc_wksp ??=
        _dylib.lookupFunction<_c_glp_mpl_alloc_wksp, _dart_glp_mpl_alloc_wksp>(
            'glp_mpl_alloc_wksp'))();
  }

  _dart_glp_mpl_alloc_wksp? _glp_mpl_alloc_wksp;

  void glp_mpl_init_rand(
    ffi.Pointer<glp_tran> tran,
    int seed,
  ) {
    return (_glp_mpl_init_rand ??=
        _dylib.lookupFunction<_c_glp_mpl_init_rand, _dart_glp_mpl_init_rand>(
            'glp_mpl_init_rand'))(
      tran,
      seed,
    );
  }

  _dart_glp_mpl_init_rand? _glp_mpl_init_rand;

  int glp_mpl_read_model(
    ffi.Pointer<glp_tran> tran,
    ffi.Pointer<ffi.Int8> fname,
    int skip,
  ) {
    return (_glp_mpl_read_model ??=
        _dylib.lookupFunction<_c_glp_mpl_read_model, _dart_glp_mpl_read_model>(
            'glp_mpl_read_model'))(
      tran,
      fname,
      skip,
    );
  }

  _dart_glp_mpl_read_model? _glp_mpl_read_model;

  int glp_mpl_read_data(
    ffi.Pointer<glp_tran> tran,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_mpl_read_data ??=
        _dylib.lookupFunction<_c_glp_mpl_read_data, _dart_glp_mpl_read_data>(
            'glp_mpl_read_data'))(
      tran,
      fname,
    );
  }

  _dart_glp_mpl_read_data? _glp_mpl_read_data;

  int glp_mpl_generate(
    ffi.Pointer<glp_tran> tran,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_mpl_generate ??=
        _dylib.lookupFunction<_c_glp_mpl_generate, _dart_glp_mpl_generate>(
            'glp_mpl_generate'))(
      tran,
      fname,
    );
  }

  _dart_glp_mpl_generate? _glp_mpl_generate;

  void glp_mpl_build_prob(
    ffi.Pointer<glp_tran> tran,
    ffi.Pointer<glp_prob> prob,
  ) {
    return (_glp_mpl_build_prob ??=
        _dylib.lookupFunction<_c_glp_mpl_build_prob, _dart_glp_mpl_build_prob>(
            'glp_mpl_build_prob'))(
      tran,
      prob,
    );
  }

  _dart_glp_mpl_build_prob? _glp_mpl_build_prob;

  int glp_mpl_postsolve(
    ffi.Pointer<glp_tran> tran,
    ffi.Pointer<glp_prob> prob,
    int sol,
  ) {
    return (_glp_mpl_postsolve ??=
        _dylib.lookupFunction<_c_glp_mpl_postsolve, _dart_glp_mpl_postsolve>(
            'glp_mpl_postsolve'))(
      tran,
      prob,
      sol,
    );
  }

  _dart_glp_mpl_postsolve? _glp_mpl_postsolve;

  void glp_mpl_free_wksp(
    ffi.Pointer<glp_tran> tran,
  ) {
    return (_glp_mpl_free_wksp ??=
        _dylib.lookupFunction<_c_glp_mpl_free_wksp, _dart_glp_mpl_free_wksp>(
            'glp_mpl_free_wksp'))(
      tran,
    );
  }

  _dart_glp_mpl_free_wksp? _glp_mpl_free_wksp;

  int glp_read_cnfsat(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_cnfsat ??=
        _dylib.lookupFunction<_c_glp_read_cnfsat, _dart_glp_read_cnfsat>(
            'glp_read_cnfsat'))(
      P,
      fname,
    );
  }

  _dart_glp_read_cnfsat? _glp_read_cnfsat;

  int glp_check_cnfsat(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_check_cnfsat ??=
        _dylib.lookupFunction<_c_glp_check_cnfsat, _dart_glp_check_cnfsat>(
            'glp_check_cnfsat'))(
      P,
    );
  }

  _dart_glp_check_cnfsat? _glp_check_cnfsat;

  int glp_write_cnfsat(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_cnfsat ??=
        _dylib.lookupFunction<_c_glp_write_cnfsat, _dart_glp_write_cnfsat>(
            'glp_write_cnfsat'))(
      P,
      fname,
    );
  }

  _dart_glp_write_cnfsat? _glp_write_cnfsat;

  int glp_minisat1(
    ffi.Pointer<glp_prob> P,
  ) {
    return (_glp_minisat1 ??= _dylib
        .lookupFunction<_c_glp_minisat1, _dart_glp_minisat1>('glp_minisat1'))(
      P,
    );
  }

  _dart_glp_minisat1? _glp_minisat1;

  int glp_intfeas1(
    ffi.Pointer<glp_prob> P,
    int use_bound,
    int obj_bound,
  ) {
    return (_glp_intfeas1 ??= _dylib
        .lookupFunction<_c_glp_intfeas1, _dart_glp_intfeas1>('glp_intfeas1'))(
      P,
      use_bound,
      obj_bound,
    );
  }

  _dart_glp_intfeas1? _glp_intfeas1;

  int glp_init_env() {
    return (_glp_init_env ??= _dylib
        .lookupFunction<_c_glp_init_env, _dart_glp_init_env>('glp_init_env'))();
  }

  _dart_glp_init_env? _glp_init_env;

  ffi.Pointer<ffi.Int8> glp_version() {
    return (_glp_version ??= _dylib
        .lookupFunction<_c_glp_version, _dart_glp_version>('glp_version'))();
  }

  _dart_glp_version? _glp_version;

  ffi.Pointer<ffi.Int8> glp_config(
    ffi.Pointer<ffi.Int8> option,
  ) {
    return (_glp_config ??=
        _dylib.lookupFunction<_c_glp_config, _dart_glp_config>('glp_config'))(
      option,
    );
  }

  _dart_glp_config? _glp_config;

  int glp_free_env() {
    return (_glp_free_env ??= _dylib
        .lookupFunction<_c_glp_free_env, _dart_glp_free_env>('glp_free_env'))();
  }

  _dart_glp_free_env? _glp_free_env;

  void glp_puts(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return (_glp_puts ??=
        _dylib.lookupFunction<_c_glp_puts, _dart_glp_puts>('glp_puts'))(
      s,
    );
  }

  _dart_glp_puts? _glp_puts;

  void glp_printf(
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return (_glp_printf ??=
        _dylib.lookupFunction<_c_glp_printf, _dart_glp_printf>('glp_printf'))(
      fmt,
    );
  }

  _dart_glp_printf? _glp_printf;

  void glp_vprintf(
    ffi.Pointer<ffi.Int8> fmt,
    ffi.Pointer<va_list_tag> arg,
  ) {
    return (_glp_vprintf ??= _dylib
        .lookupFunction<_c_glp_vprintf, _dart_glp_vprintf>('glp_vprintf'))(
      fmt,
      arg,
    );
  }

  _dart_glp_vprintf? _glp_vprintf;

  int glp_term_out(
    int flag,
  ) {
    return (_glp_term_out ??= _dylib
        .lookupFunction<_c_glp_term_out, _dart_glp_term_out>('glp_term_out'))(
      flag,
    );
  }

  _dart_glp_term_out? _glp_term_out;

  void glp_term_hook(
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> func,
    ffi.Pointer<ffi.Void> info,
  ) {
    return (_glp_term_hook ??=
        _dylib.lookupFunction<_c_glp_term_hook, _dart_glp_term_hook>(
            'glp_term_hook'))(
      func,
      info,
    );
  }

  _dart_glp_term_hook? _glp_term_hook;

  int glp_open_tee(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_open_tee ??= _dylib
        .lookupFunction<_c_glp_open_tee, _dart_glp_open_tee>('glp_open_tee'))(
      name,
    );
  }

  _dart_glp_open_tee? _glp_open_tee;

  int glp_close_tee() {
    return (_glp_close_tee ??=
        _dylib.lookupFunction<_c_glp_close_tee, _dart_glp_close_tee>(
            'glp_close_tee'))();
  }

  _dart_glp_close_tee? _glp_close_tee;

  ffi.Pointer<ffi.NativeFunction<glp_errfunc>> glp_error_(
    ffi.Pointer<ffi.Int8> file,
    int line,
  ) {
    return (_glp_error_ ??=
        _dylib.lookupFunction<_c_glp_error_, _dart_glp_error_>('glp_error_'))(
      file,
      line,
    );
  }

  _dart_glp_error_? _glp_error_;

  int glp_at_error() {
    return (_glp_at_error ??= _dylib
        .lookupFunction<_c_glp_at_error, _dart_glp_at_error>('glp_at_error'))();
  }

  _dart_glp_at_error? _glp_at_error;

  void glp_assert_(
    ffi.Pointer<ffi.Int8> expr,
    ffi.Pointer<ffi.Int8> file,
    int line,
  ) {
    return (_glp_assert_ ??= _dylib
        .lookupFunction<_c_glp_assert_, _dart_glp_assert_>('glp_assert_'))(
      expr,
      file,
      line,
    );
  }

  _dart_glp_assert_? _glp_assert_;

  void glp_error_hook(
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> func,
    ffi.Pointer<ffi.Void> info,
  ) {
    return (_glp_error_hook ??=
        _dylib.lookupFunction<_c_glp_error_hook, _dart_glp_error_hook>(
            'glp_error_hook'))(
      func,
      info,
    );
  }

  _dart_glp_error_hook? _glp_error_hook;

  ffi.Pointer<ffi.Void> glp_alloc(
    int n,
    int size,
  ) {
    return (_glp_alloc ??=
        _dylib.lookupFunction<_c_glp_alloc, _dart_glp_alloc>('glp_alloc'))(
      n,
      size,
    );
  }

  _dart_glp_alloc? _glp_alloc;

  ffi.Pointer<ffi.Void> glp_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int n,
    int size,
  ) {
    return (_glp_realloc ??= _dylib
        .lookupFunction<_c_glp_realloc, _dart_glp_realloc>('glp_realloc'))(
      ptr,
      n,
      size,
    );
  }

  _dart_glp_realloc? _glp_realloc;

  void glp_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return (_glp_free ??=
        _dylib.lookupFunction<_c_glp_free, _dart_glp_free>('glp_free'))(
      ptr,
    );
  }

  _dart_glp_free? _glp_free;

  void glp_mem_limit(
    int limit,
  ) {
    return (_glp_mem_limit ??=
        _dylib.lookupFunction<_c_glp_mem_limit, _dart_glp_mem_limit>(
            'glp_mem_limit'))(
      limit,
    );
  }

  _dart_glp_mem_limit? _glp_mem_limit;

  void glp_mem_usage(
    ffi.Pointer<ffi.Int32> count,
    ffi.Pointer<ffi.Int32> cpeak,
    ffi.Pointer<ffi.Uint64> total,
    ffi.Pointer<ffi.Uint64> tpeak,
  ) {
    return (_glp_mem_usage ??=
        _dylib.lookupFunction<_c_glp_mem_usage, _dart_glp_mem_usage>(
            'glp_mem_usage'))(
      count,
      cpeak,
      total,
      tpeak,
    );
  }

  _dart_glp_mem_usage? _glp_mem_usage;

  double glp_time() {
    return (_glp_time ??=
        _dylib.lookupFunction<_c_glp_time, _dart_glp_time>('glp_time'))();
  }

  _dart_glp_time? _glp_time;

  double glp_difftime(
    double t1,
    double t0,
  ) {
    return (_glp_difftime ??= _dylib
        .lookupFunction<_c_glp_difftime, _dart_glp_difftime>('glp_difftime'))(
      t1,
      t0,
    );
  }

  _dart_glp_difftime? _glp_difftime;

  ffi.Pointer<glp_graph> glp_create_graph(
    int v_size,
    int a_size,
  ) {
    return (_glp_create_graph ??=
        _dylib.lookupFunction<_c_glp_create_graph, _dart_glp_create_graph>(
            'glp_create_graph'))(
      v_size,
      a_size,
    );
  }

  _dart_glp_create_graph? _glp_create_graph;

  void glp_set_graph_name(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_graph_name ??=
        _dylib.lookupFunction<_c_glp_set_graph_name, _dart_glp_set_graph_name>(
            'glp_set_graph_name'))(
      G,
      name,
    );
  }

  _dart_glp_set_graph_name? _glp_set_graph_name;

  int glp_add_vertices(
    ffi.Pointer<glp_graph> G,
    int nadd,
  ) {
    return (_glp_add_vertices ??=
        _dylib.lookupFunction<_c_glp_add_vertices, _dart_glp_add_vertices>(
            'glp_add_vertices'))(
      G,
      nadd,
    );
  }

  _dart_glp_add_vertices? _glp_add_vertices;

  void glp_set_vertex_name(
    ffi.Pointer<glp_graph> G,
    int i,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_set_vertex_name ??= _dylib.lookupFunction<
        _c_glp_set_vertex_name,
        _dart_glp_set_vertex_name>('glp_set_vertex_name'))(
      G,
      i,
      name,
    );
  }

  _dart_glp_set_vertex_name? _glp_set_vertex_name;

  ffi.Pointer<glp_arc> glp_add_arc(
    ffi.Pointer<glp_graph> G,
    int i,
    int j,
  ) {
    return (_glp_add_arc ??= _dylib
        .lookupFunction<_c_glp_add_arc, _dart_glp_add_arc>('glp_add_arc'))(
      G,
      i,
      j,
    );
  }

  _dart_glp_add_arc? _glp_add_arc;

  void glp_del_vertices(
    ffi.Pointer<glp_graph> G,
    int ndel,
    ffi.Pointer<ffi.Int32> num,
  ) {
    return (_glp_del_vertices ??=
        _dylib.lookupFunction<_c_glp_del_vertices, _dart_glp_del_vertices>(
            'glp_del_vertices'))(
      G,
      ndel,
      num,
    );
  }

  _dart_glp_del_vertices? _glp_del_vertices;

  void glp_del_arc(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<glp_arc> a,
  ) {
    return (_glp_del_arc ??= _dylib
        .lookupFunction<_c_glp_del_arc, _dart_glp_del_arc>('glp_del_arc'))(
      G,
      a,
    );
  }

  _dart_glp_del_arc? _glp_del_arc;

  void glp_erase_graph(
    ffi.Pointer<glp_graph> G,
    int v_size,
    int a_size,
  ) {
    return (_glp_erase_graph ??=
        _dylib.lookupFunction<_c_glp_erase_graph, _dart_glp_erase_graph>(
            'glp_erase_graph'))(
      G,
      v_size,
      a_size,
    );
  }

  _dart_glp_erase_graph? _glp_erase_graph;

  void glp_delete_graph(
    ffi.Pointer<glp_graph> G,
  ) {
    return (_glp_delete_graph ??=
        _dylib.lookupFunction<_c_glp_delete_graph, _dart_glp_delete_graph>(
            'glp_delete_graph'))(
      G,
    );
  }

  _dart_glp_delete_graph? _glp_delete_graph;

  void glp_create_v_index(
    ffi.Pointer<glp_graph> G,
  ) {
    return (_glp_create_v_index ??=
        _dylib.lookupFunction<_c_glp_create_v_index, _dart_glp_create_v_index>(
            'glp_create_v_index'))(
      G,
    );
  }

  _dart_glp_create_v_index? _glp_create_v_index;

  int glp_find_vertex(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return (_glp_find_vertex ??=
        _dylib.lookupFunction<_c_glp_find_vertex, _dart_glp_find_vertex>(
            'glp_find_vertex'))(
      G,
      name,
    );
  }

  _dart_glp_find_vertex? _glp_find_vertex;

  void glp_delete_v_index(
    ffi.Pointer<glp_graph> G,
  ) {
    return (_glp_delete_v_index ??=
        _dylib.lookupFunction<_c_glp_delete_v_index, _dart_glp_delete_v_index>(
            'glp_delete_v_index'))(
      G,
    );
  }

  _dart_glp_delete_v_index? _glp_delete_v_index;

  int glp_read_graph(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_graph ??=
        _dylib.lookupFunction<_c_glp_read_graph, _dart_glp_read_graph>(
            'glp_read_graph'))(
      G,
      fname,
    );
  }

  _dart_glp_read_graph? _glp_read_graph;

  int glp_write_graph(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_graph ??=
        _dylib.lookupFunction<_c_glp_write_graph, _dart_glp_write_graph>(
            'glp_write_graph'))(
      G,
      fname,
    );
  }

  _dart_glp_write_graph? _glp_write_graph;

  void glp_mincost_lp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_graph> G,
    int names,
    int v_rhs,
    int a_low,
    int a_cap,
    int a_cost,
  ) {
    return (_glp_mincost_lp ??=
        _dylib.lookupFunction<_c_glp_mincost_lp, _dart_glp_mincost_lp>(
            'glp_mincost_lp'))(
      P,
      G,
      names,
      v_rhs,
      a_low,
      a_cap,
      a_cost,
    );
  }

  _dart_glp_mincost_lp? _glp_mincost_lp;

  int glp_mincost_okalg(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_low,
    int a_cap,
    int a_cost,
    ffi.Pointer<ffi.Double> sol,
    int a_x,
    int v_pi,
  ) {
    return (_glp_mincost_okalg ??=
        _dylib.lookupFunction<_c_glp_mincost_okalg, _dart_glp_mincost_okalg>(
            'glp_mincost_okalg'))(
      G,
      v_rhs,
      a_low,
      a_cap,
      a_cost,
      sol,
      a_x,
      v_pi,
    );
  }

  _dart_glp_mincost_okalg? _glp_mincost_okalg;

  int glp_mincost_relax4(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_low,
    int a_cap,
    int a_cost,
    int crash,
    ffi.Pointer<ffi.Double> sol,
    int a_x,
    int a_rc,
  ) {
    return (_glp_mincost_relax4 ??=
        _dylib.lookupFunction<_c_glp_mincost_relax4, _dart_glp_mincost_relax4>(
            'glp_mincost_relax4'))(
      G,
      v_rhs,
      a_low,
      a_cap,
      a_cost,
      crash,
      sol,
      a_x,
      a_rc,
    );
  }

  _dart_glp_mincost_relax4? _glp_mincost_relax4;

  void glp_maxflow_lp(
    ffi.Pointer<glp_prob> P,
    ffi.Pointer<glp_graph> G,
    int names,
    int s,
    int t,
    int a_cap,
  ) {
    return (_glp_maxflow_lp ??=
        _dylib.lookupFunction<_c_glp_maxflow_lp, _dart_glp_maxflow_lp>(
            'glp_maxflow_lp'))(
      P,
      G,
      names,
      s,
      t,
      a_cap,
    );
  }

  _dart_glp_maxflow_lp? _glp_maxflow_lp;

  int glp_maxflow_ffalg(
    ffi.Pointer<glp_graph> G,
    int s,
    int t,
    int a_cap,
    ffi.Pointer<ffi.Double> sol,
    int a_x,
    int v_cut,
  ) {
    return (_glp_maxflow_ffalg ??=
        _dylib.lookupFunction<_c_glp_maxflow_ffalg, _dart_glp_maxflow_ffalg>(
            'glp_maxflow_ffalg'))(
      G,
      s,
      t,
      a_cap,
      sol,
      a_x,
      v_cut,
    );
  }

  _dart_glp_maxflow_ffalg? _glp_maxflow_ffalg;

  int glp_check_asnprob(
    ffi.Pointer<glp_graph> G,
    int v_set,
  ) {
    return (_glp_check_asnprob ??=
        _dylib.lookupFunction<_c_glp_check_asnprob, _dart_glp_check_asnprob>(
            'glp_check_asnprob'))(
      G,
      v_set,
    );
  }

  _dart_glp_check_asnprob? _glp_check_asnprob;

  int glp_asnprob_lp(
    ffi.Pointer<glp_prob> P,
    int form,
    ffi.Pointer<glp_graph> G,
    int names,
    int v_set,
    int a_cost,
  ) {
    return (_glp_asnprob_lp ??=
        _dylib.lookupFunction<_c_glp_asnprob_lp, _dart_glp_asnprob_lp>(
            'glp_asnprob_lp'))(
      P,
      form,
      G,
      names,
      v_set,
      a_cost,
    );
  }

  _dart_glp_asnprob_lp? _glp_asnprob_lp;

  int glp_asnprob_okalg(
    int form,
    ffi.Pointer<glp_graph> G,
    int v_set,
    int a_cost,
    ffi.Pointer<ffi.Double> sol,
    int a_x,
  ) {
    return (_glp_asnprob_okalg ??=
        _dylib.lookupFunction<_c_glp_asnprob_okalg, _dart_glp_asnprob_okalg>(
            'glp_asnprob_okalg'))(
      form,
      G,
      v_set,
      a_cost,
      sol,
      a_x,
    );
  }

  _dart_glp_asnprob_okalg? _glp_asnprob_okalg;

  int glp_asnprob_hall(
    ffi.Pointer<glp_graph> G,
    int v_set,
    int a_x,
  ) {
    return (_glp_asnprob_hall ??=
        _dylib.lookupFunction<_c_glp_asnprob_hall, _dart_glp_asnprob_hall>(
            'glp_asnprob_hall'))(
      G,
      v_set,
      a_x,
    );
  }

  _dart_glp_asnprob_hall? _glp_asnprob_hall;

  double glp_cpp(
    ffi.Pointer<glp_graph> G,
    int v_t,
    int v_es,
    int v_ls,
  ) {
    return (_glp_cpp ??=
        _dylib.lookupFunction<_c_glp_cpp, _dart_glp_cpp>('glp_cpp'))(
      G,
      v_t,
      v_es,
      v_ls,
    );
  }

  _dart_glp_cpp? _glp_cpp;

  int glp_read_mincost(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_low,
    int a_cap,
    int a_cost,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_mincost ??=
        _dylib.lookupFunction<_c_glp_read_mincost, _dart_glp_read_mincost>(
            'glp_read_mincost'))(
      G,
      v_rhs,
      a_low,
      a_cap,
      a_cost,
      fname,
    );
  }

  _dart_glp_read_mincost? _glp_read_mincost;

  int glp_write_mincost(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_low,
    int a_cap,
    int a_cost,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_mincost ??=
        _dylib.lookupFunction<_c_glp_write_mincost, _dart_glp_write_mincost>(
            'glp_write_mincost'))(
      G,
      v_rhs,
      a_low,
      a_cap,
      a_cost,
      fname,
    );
  }

  _dart_glp_write_mincost? _glp_write_mincost;

  int glp_read_maxflow(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int32> s,
    ffi.Pointer<ffi.Int32> t,
    int a_cap,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_maxflow ??=
        _dylib.lookupFunction<_c_glp_read_maxflow, _dart_glp_read_maxflow>(
            'glp_read_maxflow'))(
      G,
      s,
      t,
      a_cap,
      fname,
    );
  }

  _dart_glp_read_maxflow? _glp_read_maxflow;

  int glp_write_maxflow(
    ffi.Pointer<glp_graph> G,
    int s,
    int t,
    int a_cap,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_maxflow ??=
        _dylib.lookupFunction<_c_glp_write_maxflow, _dart_glp_write_maxflow>(
            'glp_write_maxflow'))(
      G,
      s,
      t,
      a_cap,
      fname,
    );
  }

  _dart_glp_write_maxflow? _glp_write_maxflow;

  int glp_read_asnprob(
    ffi.Pointer<glp_graph> G,
    int v_set,
    int a_cost,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_asnprob ??=
        _dylib.lookupFunction<_c_glp_read_asnprob, _dart_glp_read_asnprob>(
            'glp_read_asnprob'))(
      G,
      v_set,
      a_cost,
      fname,
    );
  }

  _dart_glp_read_asnprob? _glp_read_asnprob;

  int glp_write_asnprob(
    ffi.Pointer<glp_graph> G,
    int v_set,
    int a_cost,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_asnprob ??=
        _dylib.lookupFunction<_c_glp_write_asnprob, _dart_glp_write_asnprob>(
            'glp_write_asnprob'))(
      G,
      v_set,
      a_cost,
      fname,
    );
  }

  _dart_glp_write_asnprob? _glp_write_asnprob;

  int glp_read_ccdata(
    ffi.Pointer<glp_graph> G,
    int v_wgt,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_read_ccdata ??=
        _dylib.lookupFunction<_c_glp_read_ccdata, _dart_glp_read_ccdata>(
            'glp_read_ccdata'))(
      G,
      v_wgt,
      fname,
    );
  }

  _dart_glp_read_ccdata? _glp_read_ccdata;

  int glp_write_ccdata(
    ffi.Pointer<glp_graph> G,
    int v_wgt,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return (_glp_write_ccdata ??=
        _dylib.lookupFunction<_c_glp_write_ccdata, _dart_glp_write_ccdata>(
            'glp_write_ccdata'))(
      G,
      v_wgt,
      fname,
    );
  }

  _dart_glp_write_ccdata? _glp_write_ccdata;

  int glp_netgen(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_cap,
    int a_cost,
    ffi.Pointer<ffi.Int32> parm,
  ) {
    return (_glp_netgen ??=
        _dylib.lookupFunction<_c_glp_netgen, _dart_glp_netgen>('glp_netgen'))(
      G,
      v_rhs,
      a_cap,
      a_cost,
      parm,
    );
  }

  _dart_glp_netgen? _glp_netgen;

  void glp_netgen_prob(
    int nprob,
    ffi.Pointer<ffi.Int32> parm,
  ) {
    return (_glp_netgen_prob ??=
        _dylib.lookupFunction<_c_glp_netgen_prob, _dart_glp_netgen_prob>(
            'glp_netgen_prob'))(
      nprob,
      parm,
    );
  }

  _dart_glp_netgen_prob? _glp_netgen_prob;

  int glp_gridgen(
    ffi.Pointer<glp_graph> G,
    int v_rhs,
    int a_cap,
    int a_cost,
    ffi.Pointer<ffi.Int32> parm,
  ) {
    return (_glp_gridgen ??= _dylib
        .lookupFunction<_c_glp_gridgen, _dart_glp_gridgen>('glp_gridgen'))(
      G,
      v_rhs,
      a_cap,
      a_cost,
      parm,
    );
  }

  _dart_glp_gridgen? _glp_gridgen;

  int glp_rmfgen(
    ffi.Pointer<glp_graph> G,
    ffi.Pointer<ffi.Int32> s,
    ffi.Pointer<ffi.Int32> t,
    int a_cap,
    ffi.Pointer<ffi.Int32> parm,
  ) {
    return (_glp_rmfgen ??=
        _dylib.lookupFunction<_c_glp_rmfgen, _dart_glp_rmfgen>('glp_rmfgen'))(
      G,
      s,
      t,
      a_cap,
      parm,
    );
  }

  _dart_glp_rmfgen? _glp_rmfgen;

  int glp_weak_comp(
    ffi.Pointer<glp_graph> G,
    int v_num,
  ) {
    return (_glp_weak_comp ??=
        _dylib.lookupFunction<_c_glp_weak_comp, _dart_glp_weak_comp>(
            'glp_weak_comp'))(
      G,
      v_num,
    );
  }

  _dart_glp_weak_comp? _glp_weak_comp;

  int glp_strong_comp(
    ffi.Pointer<glp_graph> G,
    int v_num,
  ) {
    return (_glp_strong_comp ??=
        _dylib.lookupFunction<_c_glp_strong_comp, _dart_glp_strong_comp>(
            'glp_strong_comp'))(
      G,
      v_num,
    );
  }

  _dart_glp_strong_comp? _glp_strong_comp;

  int glp_top_sort(
    ffi.Pointer<glp_graph> G,
    int v_num,
  ) {
    return (_glp_top_sort ??= _dylib
        .lookupFunction<_c_glp_top_sort, _dart_glp_top_sort>('glp_top_sort'))(
      G,
      v_num,
    );
  }

  _dart_glp_top_sort? _glp_top_sort;

  int glp_wclique_exact(
    ffi.Pointer<glp_graph> G,
    int v_wgt,
    ffi.Pointer<ffi.Double> sol,
    int v_set,
  ) {
    return (_glp_wclique_exact ??=
        _dylib.lookupFunction<_c_glp_wclique_exact, _dart_glp_wclique_exact>(
            'glp_wclique_exact'))(
      G,
      v_wgt,
      sol,
      v_set,
    );
  }

  _dart_glp_wclique_exact? _glp_wclique_exact;
}

class glp_prob extends ffi.Opaque {}

class glp_bfcp extends ffi.Struct {
  @ffi.Int32()
  external int msg_lev;

  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int lu_size;

  @ffi.Double()
  external double piv_tol;

  @ffi.Int32()
  external int piv_lim;

  @ffi.Int32()
  external int suhl;

  @ffi.Double()
  external double eps_tol;

  @ffi.Double()
  external double max_gro;

  @ffi.Int32()
  external int nfs_max;

  @ffi.Double()
  external double upd_tol;

  @ffi.Int32()
  external int nrs_max;

  @ffi.Int32()
  external int rs_size;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;
  @ffi.Double()
  external double _unique_foo_bar_item_17;
  @ffi.Double()
  external double _unique_foo_bar_item_18;
  @ffi.Double()
  external double _unique_foo_bar_item_19;
  @ffi.Double()
  external double _unique_foo_bar_item_20;
  @ffi.Double()
  external double _unique_foo_bar_item_21;
  @ffi.Double()
  external double _unique_foo_bar_item_22;
  @ffi.Double()
  external double _unique_foo_bar_item_23;
  @ffi.Double()
  external double _unique_foo_bar_item_24;
  @ffi.Double()
  external double _unique_foo_bar_item_25;
  @ffi.Double()
  external double _unique_foo_bar_item_26;
  @ffi.Double()
  external double _unique_foo_bar_item_27;
  @ffi.Double()
  external double _unique_foo_bar_item_28;
  @ffi.Double()
  external double _unique_foo_bar_item_29;
  @ffi.Double()
  external double _unique_foo_bar_item_30;
  @ffi.Double()
  external double _unique_foo_bar_item_31;
  @ffi.Double()
  external double _unique_foo_bar_item_32;
  @ffi.Double()
  external double _unique_foo_bar_item_33;
  @ffi.Double()
  external double _unique_foo_bar_item_34;
  @ffi.Double()
  external double _unique_foo_bar_item_35;
  @ffi.Double()
  external double _unique_foo_bar_item_36;
  @ffi.Double()
  external double _unique_foo_bar_item_37;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_bfcp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_bfcp_foo_bar_level0(this, [38], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_bfcp`.
class ArrayHelper_glp_bfcp_foo_bar_level0 {
  final glp_bfcp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_bfcp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      case 17:
        return _struct._unique_foo_bar_item_17;
      case 18:
        return _struct._unique_foo_bar_item_18;
      case 19:
        return _struct._unique_foo_bar_item_19;
      case 20:
        return _struct._unique_foo_bar_item_20;
      case 21:
        return _struct._unique_foo_bar_item_21;
      case 22:
        return _struct._unique_foo_bar_item_22;
      case 23:
        return _struct._unique_foo_bar_item_23;
      case 24:
        return _struct._unique_foo_bar_item_24;
      case 25:
        return _struct._unique_foo_bar_item_25;
      case 26:
        return _struct._unique_foo_bar_item_26;
      case 27:
        return _struct._unique_foo_bar_item_27;
      case 28:
        return _struct._unique_foo_bar_item_28;
      case 29:
        return _struct._unique_foo_bar_item_29;
      case 30:
        return _struct._unique_foo_bar_item_30;
      case 31:
        return _struct._unique_foo_bar_item_31;
      case 32:
        return _struct._unique_foo_bar_item_32;
      case 33:
        return _struct._unique_foo_bar_item_33;
      case 34:
        return _struct._unique_foo_bar_item_34;
      case 35:
        return _struct._unique_foo_bar_item_35;
      case 36:
        return _struct._unique_foo_bar_item_36;
      case 37:
        return _struct._unique_foo_bar_item_37;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      case 17:
        _struct._unique_foo_bar_item_17 = value;
        break;
      case 18:
        _struct._unique_foo_bar_item_18 = value;
        break;
      case 19:
        _struct._unique_foo_bar_item_19 = value;
        break;
      case 20:
        _struct._unique_foo_bar_item_20 = value;
        break;
      case 21:
        _struct._unique_foo_bar_item_21 = value;
        break;
      case 22:
        _struct._unique_foo_bar_item_22 = value;
        break;
      case 23:
        _struct._unique_foo_bar_item_23 = value;
        break;
      case 24:
        _struct._unique_foo_bar_item_24 = value;
        break;
      case 25:
        _struct._unique_foo_bar_item_25 = value;
        break;
      case 26:
        _struct._unique_foo_bar_item_26 = value;
        break;
      case 27:
        _struct._unique_foo_bar_item_27 = value;
        break;
      case 28:
        _struct._unique_foo_bar_item_28 = value;
        break;
      case 29:
        _struct._unique_foo_bar_item_29 = value;
        break;
      case 30:
        _struct._unique_foo_bar_item_30 = value;
        break;
      case 31:
        _struct._unique_foo_bar_item_31 = value;
        break;
      case 32:
        _struct._unique_foo_bar_item_32 = value;
        break;
      case 33:
        _struct._unique_foo_bar_item_33 = value;
        break;
      case 34:
        _struct._unique_foo_bar_item_34 = value;
        break;
      case 35:
        _struct._unique_foo_bar_item_35 = value;
        break;
      case 36:
        _struct._unique_foo_bar_item_36 = value;
        break;
      case 37:
        _struct._unique_foo_bar_item_37 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_smcp extends ffi.Struct {
  @ffi.Int32()
  external int msg_lev;

  @ffi.Int32()
  external int meth;

  @ffi.Int32()
  external int pricing;

  @ffi.Int32()
  external int r_test;

  @ffi.Double()
  external double tol_bnd;

  @ffi.Double()
  external double tol_dj;

  @ffi.Double()
  external double tol_piv;

  @ffi.Double()
  external double obj_ll;

  @ffi.Double()
  external double obj_ul;

  @ffi.Int32()
  external int it_lim;

  @ffi.Int32()
  external int tm_lim;

  @ffi.Int32()
  external int out_frq;

  @ffi.Int32()
  external int out_dly;

  @ffi.Int32()
  external int presolve;

  @ffi.Int32()
  external int excl;

  @ffi.Int32()
  external int shift;

  @ffi.Int32()
  external int aorn;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;
  @ffi.Double()
  external double _unique_foo_bar_item_17;
  @ffi.Double()
  external double _unique_foo_bar_item_18;
  @ffi.Double()
  external double _unique_foo_bar_item_19;
  @ffi.Double()
  external double _unique_foo_bar_item_20;
  @ffi.Double()
  external double _unique_foo_bar_item_21;
  @ffi.Double()
  external double _unique_foo_bar_item_22;
  @ffi.Double()
  external double _unique_foo_bar_item_23;
  @ffi.Double()
  external double _unique_foo_bar_item_24;
  @ffi.Double()
  external double _unique_foo_bar_item_25;
  @ffi.Double()
  external double _unique_foo_bar_item_26;
  @ffi.Double()
  external double _unique_foo_bar_item_27;
  @ffi.Double()
  external double _unique_foo_bar_item_28;
  @ffi.Double()
  external double _unique_foo_bar_item_29;
  @ffi.Double()
  external double _unique_foo_bar_item_30;
  @ffi.Double()
  external double _unique_foo_bar_item_31;
  @ffi.Double()
  external double _unique_foo_bar_item_32;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_smcp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_smcp_foo_bar_level0(this, [33], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_smcp`.
class ArrayHelper_glp_smcp_foo_bar_level0 {
  final glp_smcp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_smcp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      case 17:
        return _struct._unique_foo_bar_item_17;
      case 18:
        return _struct._unique_foo_bar_item_18;
      case 19:
        return _struct._unique_foo_bar_item_19;
      case 20:
        return _struct._unique_foo_bar_item_20;
      case 21:
        return _struct._unique_foo_bar_item_21;
      case 22:
        return _struct._unique_foo_bar_item_22;
      case 23:
        return _struct._unique_foo_bar_item_23;
      case 24:
        return _struct._unique_foo_bar_item_24;
      case 25:
        return _struct._unique_foo_bar_item_25;
      case 26:
        return _struct._unique_foo_bar_item_26;
      case 27:
        return _struct._unique_foo_bar_item_27;
      case 28:
        return _struct._unique_foo_bar_item_28;
      case 29:
        return _struct._unique_foo_bar_item_29;
      case 30:
        return _struct._unique_foo_bar_item_30;
      case 31:
        return _struct._unique_foo_bar_item_31;
      case 32:
        return _struct._unique_foo_bar_item_32;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      case 17:
        _struct._unique_foo_bar_item_17 = value;
        break;
      case 18:
        _struct._unique_foo_bar_item_18 = value;
        break;
      case 19:
        _struct._unique_foo_bar_item_19 = value;
        break;
      case 20:
        _struct._unique_foo_bar_item_20 = value;
        break;
      case 21:
        _struct._unique_foo_bar_item_21 = value;
        break;
      case 22:
        _struct._unique_foo_bar_item_22 = value;
        break;
      case 23:
        _struct._unique_foo_bar_item_23 = value;
        break;
      case 24:
        _struct._unique_foo_bar_item_24 = value;
        break;
      case 25:
        _struct._unique_foo_bar_item_25 = value;
        break;
      case 26:
        _struct._unique_foo_bar_item_26 = value;
        break;
      case 27:
        _struct._unique_foo_bar_item_27 = value;
        break;
      case 28:
        _struct._unique_foo_bar_item_28 = value;
        break;
      case 29:
        _struct._unique_foo_bar_item_29 = value;
        break;
      case 30:
        _struct._unique_foo_bar_item_30 = value;
        break;
      case 31:
        _struct._unique_foo_bar_item_31 = value;
        break;
      case 32:
        _struct._unique_foo_bar_item_32 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_iptcp extends ffi.Struct {
  @ffi.Int32()
  external int msg_lev;

  @ffi.Int32()
  external int ord_alg;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;
  @ffi.Double()
  external double _unique_foo_bar_item_17;
  @ffi.Double()
  external double _unique_foo_bar_item_18;
  @ffi.Double()
  external double _unique_foo_bar_item_19;
  @ffi.Double()
  external double _unique_foo_bar_item_20;
  @ffi.Double()
  external double _unique_foo_bar_item_21;
  @ffi.Double()
  external double _unique_foo_bar_item_22;
  @ffi.Double()
  external double _unique_foo_bar_item_23;
  @ffi.Double()
  external double _unique_foo_bar_item_24;
  @ffi.Double()
  external double _unique_foo_bar_item_25;
  @ffi.Double()
  external double _unique_foo_bar_item_26;
  @ffi.Double()
  external double _unique_foo_bar_item_27;
  @ffi.Double()
  external double _unique_foo_bar_item_28;
  @ffi.Double()
  external double _unique_foo_bar_item_29;
  @ffi.Double()
  external double _unique_foo_bar_item_30;
  @ffi.Double()
  external double _unique_foo_bar_item_31;
  @ffi.Double()
  external double _unique_foo_bar_item_32;
  @ffi.Double()
  external double _unique_foo_bar_item_33;
  @ffi.Double()
  external double _unique_foo_bar_item_34;
  @ffi.Double()
  external double _unique_foo_bar_item_35;
  @ffi.Double()
  external double _unique_foo_bar_item_36;
  @ffi.Double()
  external double _unique_foo_bar_item_37;
  @ffi.Double()
  external double _unique_foo_bar_item_38;
  @ffi.Double()
  external double _unique_foo_bar_item_39;
  @ffi.Double()
  external double _unique_foo_bar_item_40;
  @ffi.Double()
  external double _unique_foo_bar_item_41;
  @ffi.Double()
  external double _unique_foo_bar_item_42;
  @ffi.Double()
  external double _unique_foo_bar_item_43;
  @ffi.Double()
  external double _unique_foo_bar_item_44;
  @ffi.Double()
  external double _unique_foo_bar_item_45;
  @ffi.Double()
  external double _unique_foo_bar_item_46;
  @ffi.Double()
  external double _unique_foo_bar_item_47;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_iptcp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_iptcp_foo_bar_level0(this, [48], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_iptcp`.
class ArrayHelper_glp_iptcp_foo_bar_level0 {
  final glp_iptcp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_iptcp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      case 17:
        return _struct._unique_foo_bar_item_17;
      case 18:
        return _struct._unique_foo_bar_item_18;
      case 19:
        return _struct._unique_foo_bar_item_19;
      case 20:
        return _struct._unique_foo_bar_item_20;
      case 21:
        return _struct._unique_foo_bar_item_21;
      case 22:
        return _struct._unique_foo_bar_item_22;
      case 23:
        return _struct._unique_foo_bar_item_23;
      case 24:
        return _struct._unique_foo_bar_item_24;
      case 25:
        return _struct._unique_foo_bar_item_25;
      case 26:
        return _struct._unique_foo_bar_item_26;
      case 27:
        return _struct._unique_foo_bar_item_27;
      case 28:
        return _struct._unique_foo_bar_item_28;
      case 29:
        return _struct._unique_foo_bar_item_29;
      case 30:
        return _struct._unique_foo_bar_item_30;
      case 31:
        return _struct._unique_foo_bar_item_31;
      case 32:
        return _struct._unique_foo_bar_item_32;
      case 33:
        return _struct._unique_foo_bar_item_33;
      case 34:
        return _struct._unique_foo_bar_item_34;
      case 35:
        return _struct._unique_foo_bar_item_35;
      case 36:
        return _struct._unique_foo_bar_item_36;
      case 37:
        return _struct._unique_foo_bar_item_37;
      case 38:
        return _struct._unique_foo_bar_item_38;
      case 39:
        return _struct._unique_foo_bar_item_39;
      case 40:
        return _struct._unique_foo_bar_item_40;
      case 41:
        return _struct._unique_foo_bar_item_41;
      case 42:
        return _struct._unique_foo_bar_item_42;
      case 43:
        return _struct._unique_foo_bar_item_43;
      case 44:
        return _struct._unique_foo_bar_item_44;
      case 45:
        return _struct._unique_foo_bar_item_45;
      case 46:
        return _struct._unique_foo_bar_item_46;
      case 47:
        return _struct._unique_foo_bar_item_47;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      case 17:
        _struct._unique_foo_bar_item_17 = value;
        break;
      case 18:
        _struct._unique_foo_bar_item_18 = value;
        break;
      case 19:
        _struct._unique_foo_bar_item_19 = value;
        break;
      case 20:
        _struct._unique_foo_bar_item_20 = value;
        break;
      case 21:
        _struct._unique_foo_bar_item_21 = value;
        break;
      case 22:
        _struct._unique_foo_bar_item_22 = value;
        break;
      case 23:
        _struct._unique_foo_bar_item_23 = value;
        break;
      case 24:
        _struct._unique_foo_bar_item_24 = value;
        break;
      case 25:
        _struct._unique_foo_bar_item_25 = value;
        break;
      case 26:
        _struct._unique_foo_bar_item_26 = value;
        break;
      case 27:
        _struct._unique_foo_bar_item_27 = value;
        break;
      case 28:
        _struct._unique_foo_bar_item_28 = value;
        break;
      case 29:
        _struct._unique_foo_bar_item_29 = value;
        break;
      case 30:
        _struct._unique_foo_bar_item_30 = value;
        break;
      case 31:
        _struct._unique_foo_bar_item_31 = value;
        break;
      case 32:
        _struct._unique_foo_bar_item_32 = value;
        break;
      case 33:
        _struct._unique_foo_bar_item_33 = value;
        break;
      case 34:
        _struct._unique_foo_bar_item_34 = value;
        break;
      case 35:
        _struct._unique_foo_bar_item_35 = value;
        break;
      case 36:
        _struct._unique_foo_bar_item_36 = value;
        break;
      case 37:
        _struct._unique_foo_bar_item_37 = value;
        break;
      case 38:
        _struct._unique_foo_bar_item_38 = value;
        break;
      case 39:
        _struct._unique_foo_bar_item_39 = value;
        break;
      case 40:
        _struct._unique_foo_bar_item_40 = value;
        break;
      case 41:
        _struct._unique_foo_bar_item_41 = value;
        break;
      case 42:
        _struct._unique_foo_bar_item_42 = value;
        break;
      case 43:
        _struct._unique_foo_bar_item_43 = value;
        break;
      case 44:
        _struct._unique_foo_bar_item_44 = value;
        break;
      case 45:
        _struct._unique_foo_bar_item_45 = value;
        break;
      case 46:
        _struct._unique_foo_bar_item_46 = value;
        break;
      case 47:
        _struct._unique_foo_bar_item_47 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_tree extends ffi.Opaque {}

class glp_iocp extends ffi.Struct {
  @ffi.Int32()
  external int msg_lev;

  @ffi.Int32()
  external int br_tech;

  @ffi.Int32()
  external int bt_tech;

  @ffi.Double()
  external double tol_int;

  @ffi.Double()
  external double tol_obj;

  @ffi.Int32()
  external int tm_lim;

  @ffi.Int32()
  external int out_frq;

  @ffi.Int32()
  external int out_dly;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> cb_func;

  external ffi.Pointer<ffi.Void> cb_info;

  @ffi.Int32()
  external int cb_size;

  @ffi.Int32()
  external int pp_tech;

  @ffi.Double()
  external double mip_gap;

  @ffi.Int32()
  external int mir_cuts;

  @ffi.Int32()
  external int gmi_cuts;

  @ffi.Int32()
  external int cov_cuts;

  @ffi.Int32()
  external int clq_cuts;

  @ffi.Int32()
  external int presolve;

  @ffi.Int32()
  external int binarize;

  @ffi.Int32()
  external int fp_heur;

  @ffi.Int32()
  external int ps_heur;

  @ffi.Int32()
  external int ps_tm_lim;

  @ffi.Int32()
  external int sr_heur;

  @ffi.Int32()
  external int use_sol;

  external ffi.Pointer<ffi.Int8> save_sol;

  @ffi.Int32()
  external int alien;

  @ffi.Int32()
  external int flip;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;
  @ffi.Double()
  external double _unique_foo_bar_item_17;
  @ffi.Double()
  external double _unique_foo_bar_item_18;
  @ffi.Double()
  external double _unique_foo_bar_item_19;
  @ffi.Double()
  external double _unique_foo_bar_item_20;
  @ffi.Double()
  external double _unique_foo_bar_item_21;
  @ffi.Double()
  external double _unique_foo_bar_item_22;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_iocp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_iocp_foo_bar_level0(this, [23], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_iocp`.
class ArrayHelper_glp_iocp_foo_bar_level0 {
  final glp_iocp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_iocp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      case 17:
        return _struct._unique_foo_bar_item_17;
      case 18:
        return _struct._unique_foo_bar_item_18;
      case 19:
        return _struct._unique_foo_bar_item_19;
      case 20:
        return _struct._unique_foo_bar_item_20;
      case 21:
        return _struct._unique_foo_bar_item_21;
      case 22:
        return _struct._unique_foo_bar_item_22;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      case 17:
        _struct._unique_foo_bar_item_17 = value;
        break;
      case 18:
        _struct._unique_foo_bar_item_18 = value;
        break;
      case 19:
        _struct._unique_foo_bar_item_19 = value;
        break;
      case 20:
        _struct._unique_foo_bar_item_20 = value;
        break;
      case 21:
        _struct._unique_foo_bar_item_21 = value;
        break;
      case 22:
        _struct._unique_foo_bar_item_22 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_attr extends ffi.Struct {
  @ffi.Int32()
  external int level;

  @ffi.Int32()
  external int origin;

  @ffi.Int32()
  external int klass;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_attr_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_attr_foo_bar_level0(this, [7], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_attr`.
class ArrayHelper_glp_attr_foo_bar_level0 {
  final glp_attr _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_attr_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_mpscp extends ffi.Struct {
  @ffi.Int32()
  external int blank;

  external ffi.Pointer<ffi.Int8> obj_name;

  @ffi.Double()
  external double tol_mps;

  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_mpscp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_mpscp_foo_bar_level0(this, [17], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_mpscp`.
class ArrayHelper_glp_mpscp_foo_bar_level0 {
  final glp_mpscp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_mpscp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_cpxcp extends ffi.Struct {
  @ffi.Double()
  external double _unique_foo_bar_item_0;
  @ffi.Double()
  external double _unique_foo_bar_item_1;
  @ffi.Double()
  external double _unique_foo_bar_item_2;
  @ffi.Double()
  external double _unique_foo_bar_item_3;
  @ffi.Double()
  external double _unique_foo_bar_item_4;
  @ffi.Double()
  external double _unique_foo_bar_item_5;
  @ffi.Double()
  external double _unique_foo_bar_item_6;
  @ffi.Double()
  external double _unique_foo_bar_item_7;
  @ffi.Double()
  external double _unique_foo_bar_item_8;
  @ffi.Double()
  external double _unique_foo_bar_item_9;
  @ffi.Double()
  external double _unique_foo_bar_item_10;
  @ffi.Double()
  external double _unique_foo_bar_item_11;
  @ffi.Double()
  external double _unique_foo_bar_item_12;
  @ffi.Double()
  external double _unique_foo_bar_item_13;
  @ffi.Double()
  external double _unique_foo_bar_item_14;
  @ffi.Double()
  external double _unique_foo_bar_item_15;
  @ffi.Double()
  external double _unique_foo_bar_item_16;
  @ffi.Double()
  external double _unique_foo_bar_item_17;
  @ffi.Double()
  external double _unique_foo_bar_item_18;
  @ffi.Double()
  external double _unique_foo_bar_item_19;

  /// Helper for array `foo_bar`.
  ArrayHelper_glp_cpxcp_foo_bar_level0 get foo_bar =>
      ArrayHelper_glp_cpxcp_foo_bar_level0(this, [20], 0, 0);
}

/// Helper for array `foo_bar` in struct `glp_cpxcp`.
class ArrayHelper_glp_cpxcp_foo_bar_level0 {
  final glp_cpxcp _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_glp_cpxcp_foo_bar_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  double operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_foo_bar_item_0;
      case 1:
        return _struct._unique_foo_bar_item_1;
      case 2:
        return _struct._unique_foo_bar_item_2;
      case 3:
        return _struct._unique_foo_bar_item_3;
      case 4:
        return _struct._unique_foo_bar_item_4;
      case 5:
        return _struct._unique_foo_bar_item_5;
      case 6:
        return _struct._unique_foo_bar_item_6;
      case 7:
        return _struct._unique_foo_bar_item_7;
      case 8:
        return _struct._unique_foo_bar_item_8;
      case 9:
        return _struct._unique_foo_bar_item_9;
      case 10:
        return _struct._unique_foo_bar_item_10;
      case 11:
        return _struct._unique_foo_bar_item_11;
      case 12:
        return _struct._unique_foo_bar_item_12;
      case 13:
        return _struct._unique_foo_bar_item_13;
      case 14:
        return _struct._unique_foo_bar_item_14;
      case 15:
        return _struct._unique_foo_bar_item_15;
      case 16:
        return _struct._unique_foo_bar_item_16;
      case 17:
        return _struct._unique_foo_bar_item_17;
      case 18:
        return _struct._unique_foo_bar_item_18;
      case 19:
        return _struct._unique_foo_bar_item_19;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, double value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_foo_bar_item_0 = value;
        break;
      case 1:
        _struct._unique_foo_bar_item_1 = value;
        break;
      case 2:
        _struct._unique_foo_bar_item_2 = value;
        break;
      case 3:
        _struct._unique_foo_bar_item_3 = value;
        break;
      case 4:
        _struct._unique_foo_bar_item_4 = value;
        break;
      case 5:
        _struct._unique_foo_bar_item_5 = value;
        break;
      case 6:
        _struct._unique_foo_bar_item_6 = value;
        break;
      case 7:
        _struct._unique_foo_bar_item_7 = value;
        break;
      case 8:
        _struct._unique_foo_bar_item_8 = value;
        break;
      case 9:
        _struct._unique_foo_bar_item_9 = value;
        break;
      case 10:
        _struct._unique_foo_bar_item_10 = value;
        break;
      case 11:
        _struct._unique_foo_bar_item_11 = value;
        break;
      case 12:
        _struct._unique_foo_bar_item_12 = value;
        break;
      case 13:
        _struct._unique_foo_bar_item_13 = value;
        break;
      case 14:
        _struct._unique_foo_bar_item_14 = value;
        break;
      case 15:
        _struct._unique_foo_bar_item_15 = value;
        break;
      case 16:
        _struct._unique_foo_bar_item_16 = value;
        break;
      case 17:
        _struct._unique_foo_bar_item_17 = value;
        break;
      case 18:
        _struct._unique_foo_bar_item_18 = value;
        break;
      case 19:
        _struct._unique_foo_bar_item_19 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class glp_prep extends ffi.Opaque {}

class glp_tran extends ffi.Opaque {}

class va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class glp_graph extends ffi.Opaque {}

class glp_vertex extends ffi.Opaque {}

class glp_arc extends ffi.Opaque {}

const int GLP_MAJOR_VERSION = 5;

const int GLP_MINOR_VERSION = 0;

const int GLP_MIN = 1;

const int GLP_MAX = 2;

const int GLP_CV = 1;

const int GLP_IV = 2;

const int GLP_BV = 3;

const int GLP_FR = 1;

const int GLP_LO = 2;

const int GLP_UP = 3;

const int GLP_DB = 4;

const int GLP_FX = 5;

const int GLP_BS = 1;

const int GLP_NL = 2;

const int GLP_NU = 3;

const int GLP_NF = 4;

const int GLP_NS = 5;

const int GLP_SF_GM = 1;

const int GLP_SF_EQ = 16;

const int GLP_SF_2N = 32;

const int GLP_SF_SKIP = 64;

const int GLP_SF_AUTO = 128;

const int GLP_SOL = 1;

const int GLP_IPT = 2;

const int GLP_MIP = 3;

const int GLP_UNDEF = 1;

const int GLP_FEAS = 2;

const int GLP_INFEAS = 3;

const int GLP_NOFEAS = 4;

const int GLP_OPT = 5;

const int GLP_UNBND = 6;

const int GLP_BF_LUF = 0;

const int GLP_BF_BTF = 16;

const int GLP_BF_FT = 1;

const int GLP_BF_BG = 2;

const int GLP_BF_GR = 3;

const int GLP_MSG_OFF = 0;

const int GLP_MSG_ERR = 1;

const int GLP_MSG_ON = 2;

const int GLP_MSG_ALL = 3;

const int GLP_MSG_DBG = 4;

const int GLP_PRIMAL = 1;

const int GLP_DUALP = 2;

const int GLP_DUAL = 3;

const int GLP_PT_STD = 17;

const int GLP_PT_PSE = 34;

const int GLP_RT_STD = 17;

const int GLP_RT_HAR = 34;

const int GLP_RT_FLIP = 51;

const int GLP_USE_AT = 1;

const int GLP_USE_NT = 2;

const int GLP_ORD_NONE = 0;

const int GLP_ORD_QMD = 1;

const int GLP_ORD_AMD = 2;

const int GLP_ORD_SYMAMD = 3;

const int GLP_BR_FFV = 1;

const int GLP_BR_LFV = 2;

const int GLP_BR_MFV = 3;

const int GLP_BR_DTH = 4;

const int GLP_BR_PCH = 5;

const int GLP_BT_DFS = 1;

const int GLP_BT_BFS = 2;

const int GLP_BT_BLB = 3;

const int GLP_BT_BPH = 4;

const int GLP_PP_NONE = 0;

const int GLP_PP_ROOT = 1;

const int GLP_PP_ALL = 2;

const int GLP_RF_REG = 0;

const int GLP_RF_LAZY = 1;

const int GLP_RF_CUT = 2;

const int GLP_RF_GMI = 1;

const int GLP_RF_MIR = 2;

const int GLP_RF_COV = 3;

const int GLP_RF_CLQ = 4;

const int GLP_ON = 1;

const int GLP_OFF = 0;

const int GLP_IROWGEN = 1;

const int GLP_IBINGO = 2;

const int GLP_IHEUR = 3;

const int GLP_ICUTGEN = 4;

const int GLP_IBRANCH = 5;

const int GLP_ISELECT = 6;

const int GLP_IPREPRO = 7;

const int GLP_NO_BRNCH = 0;

const int GLP_DN_BRNCH = 1;

const int GLP_UP_BRNCH = 2;

const int GLP_EBADB = 1;

const int GLP_ESING = 2;

const int GLP_ECOND = 3;

const int GLP_EBOUND = 4;

const int GLP_EFAIL = 5;

const int GLP_EOBJLL = 6;

const int GLP_EOBJUL = 7;

const int GLP_EITLIM = 8;

const int GLP_ETMLIM = 9;

const int GLP_ENOPFS = 10;

const int GLP_ENODFS = 11;

const int GLP_EROOT = 12;

const int GLP_ESTOP = 13;

const int GLP_EMIPGAP = 14;

const int GLP_ENOFEAS = 15;

const int GLP_ENOCVG = 16;

const int GLP_EINSTAB = 17;

const int GLP_EDATA = 18;

const int GLP_ERANGE = 19;

const int GLP_KKT_PE = 1;

const int GLP_KKT_PB = 2;

const int GLP_KKT_DE = 3;

const int GLP_KKT_DB = 4;

const int GLP_KKT_CS = 5;

const int GLP_MPS_DECK = 1;

const int GLP_MPS_FILE = 2;

const int GLP_ASN_MIN = 1;

const int GLP_ASN_MAX = 2;

const int GLP_ASN_MMP = 3;

typedef _c_glp_create_prob = ffi.Pointer<glp_prob> Function();

typedef _dart_glp_create_prob = ffi.Pointer<glp_prob> Function();

typedef _c_glp_set_prob_name = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_prob_name = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_set_obj_name = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_obj_name = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_set_obj_dir = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 dir,
);

typedef _dart_glp_set_obj_dir = void Function(
  ffi.Pointer<glp_prob> P,
  int dir,
);

typedef _c_glp_add_rows = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 nrs,
);

typedef _dart_glp_add_rows = int Function(
  ffi.Pointer<glp_prob> P,
  int nrs,
);

typedef _c_glp_add_cols = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 ncs,
);

typedef _dart_glp_add_cols = int Function(
  ffi.Pointer<glp_prob> P,
  int ncs,
);

typedef _c_glp_set_row_name = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_row_name = void Function(
  ffi.Pointer<glp_prob> P,
  int i,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_set_col_name = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_col_name = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_set_row_bnds = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Int32 type,
  ffi.Double lb,
  ffi.Double ub,
);

typedef _dart_glp_set_row_bnds = void Function(
  ffi.Pointer<glp_prob> P,
  int i,
  int type,
  double lb,
  double ub,
);

typedef _c_glp_set_col_bnds = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Int32 type,
  ffi.Double lb,
  ffi.Double ub,
);

typedef _dart_glp_set_col_bnds = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  int type,
  double lb,
  double ub,
);

typedef _c_glp_set_obj_coef = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Double coef,
);

typedef _dart_glp_set_obj_coef = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  double coef,
);

typedef _c_glp_set_mat_row = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_set_mat_row = void Function(
  ffi.Pointer<glp_prob> P,
  int i,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_set_mat_col = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_set_mat_col = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_load_matrix = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 ne,
  ffi.Pointer<ffi.Int32> ia,
  ffi.Pointer<ffi.Int32> ja,
  ffi.Pointer<ffi.Double> ar,
);

typedef _dart_glp_load_matrix = void Function(
  ffi.Pointer<glp_prob> P,
  int ne,
  ffi.Pointer<ffi.Int32> ia,
  ffi.Pointer<ffi.Int32> ja,
  ffi.Pointer<ffi.Double> ar,
);

typedef _c_glp_check_dup = ffi.Int32 Function(
  ffi.Int32 m,
  ffi.Int32 n,
  ffi.Int32 ne,
  ffi.Pointer<ffi.Int32> ia,
  ffi.Pointer<ffi.Int32> ja,
);

typedef _dart_glp_check_dup = int Function(
  int m,
  int n,
  int ne,
  ffi.Pointer<ffi.Int32> ia,
  ffi.Pointer<ffi.Int32> ja,
);

typedef _c_glp_sort_matrix = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_sort_matrix = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_del_rows = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 nrs,
  ffi.Pointer<ffi.Int32> num,
);

typedef _dart_glp_del_rows = void Function(
  ffi.Pointer<glp_prob> P,
  int nrs,
  ffi.Pointer<ffi.Int32> num,
);

typedef _c_glp_del_cols = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 ncs,
  ffi.Pointer<ffi.Int32> num,
);

typedef _dart_glp_del_cols = void Function(
  ffi.Pointer<glp_prob> P,
  int ncs,
  ffi.Pointer<ffi.Int32> num,
);

typedef _c_glp_copy_prob = ffi.Void Function(
  ffi.Pointer<glp_prob> dest,
  ffi.Pointer<glp_prob> prob,
  ffi.Int32 names,
);

typedef _dart_glp_copy_prob = void Function(
  ffi.Pointer<glp_prob> dest,
  ffi.Pointer<glp_prob> prob,
  int names,
);

typedef _c_glp_erase_prob = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_erase_prob = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_delete_prob = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_delete_prob = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_prob_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_prob_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_obj_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_obj_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_obj_dir = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_obj_dir = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_num_rows = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_num_rows = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_num_cols = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_num_cols = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_row_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_col_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_row_type = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_type = int Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_row_lb = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_lb = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_row_ub = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_ub = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_col_type = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_type = int Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_col_lb = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_lb = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_col_ub = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_ub = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_obj_coef = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_obj_coef = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_num_nz = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_num_nz = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_mat_row = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_get_mat_row = int Function(
  ffi.Pointer<glp_prob> P,
  int i,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_get_mat_col = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_get_mat_col = int Function(
  ffi.Pointer<glp_prob> P,
  int j,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_create_index = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_create_index = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_find_row = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_find_row = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_find_col = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_find_col = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_delete_index = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_delete_index = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_set_rii = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Double rii,
);

typedef _dart_glp_set_rii = void Function(
  ffi.Pointer<glp_prob> P,
  int i,
  double rii,
);

typedef _c_glp_set_sjj = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Double sjj,
);

typedef _dart_glp_set_sjj = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  double sjj,
);

typedef _c_glp_get_rii = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_rii = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_sjj = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_sjj = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_scale_prob = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 flags,
);

typedef _dart_glp_scale_prob = void Function(
  ffi.Pointer<glp_prob> P,
  int flags,
);

typedef _c_glp_unscale_prob = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_unscale_prob = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_set_row_stat = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
  ffi.Int32 stat,
);

typedef _dart_glp_set_row_stat = void Function(
  ffi.Pointer<glp_prob> P,
  int i,
  int stat,
);

typedef _c_glp_set_col_stat = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Int32 stat,
);

typedef _dart_glp_set_col_stat = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  int stat,
);

typedef _c_glp_std_basis = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_std_basis = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_adv_basis = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 flags,
);

typedef _dart_glp_adv_basis = void Function(
  ffi.Pointer<glp_prob> P,
  int flags,
);

typedef _c_glp_cpx_basis = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_cpx_basis = void Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_simplex = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_smcp> parm,
);

typedef _dart_glp_simplex = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_smcp> parm,
);

typedef _c_glp_exact = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_smcp> parm,
);

typedef _dart_glp_exact = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_smcp> parm,
);

typedef _c_glp_init_smcp = ffi.Void Function(
  ffi.Pointer<glp_smcp> parm,
);

typedef _dart_glp_init_smcp = void Function(
  ffi.Pointer<glp_smcp> parm,
);

typedef _c_glp_get_status = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_status = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_prim_stat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_prim_stat = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_dual_stat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_dual_stat = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_obj_val = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_obj_val = double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_row_stat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_stat = int Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_row_prim = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_prim = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_row_dual = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_dual = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_col_stat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_stat = int Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_col_prim = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_prim = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_col_dual = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_dual = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_unbnd_ray = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_unbnd_ray = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_it_cnt = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_it_cnt = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_set_it_cnt = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 it_cnt,
);

typedef _dart_glp_set_it_cnt = void Function(
  ffi.Pointer<glp_prob> P,
  int it_cnt,
);

typedef _c_glp_interior = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_iptcp> parm,
);

typedef _dart_glp_interior = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_iptcp> parm,
);

typedef _c_glp_init_iptcp = ffi.Void Function(
  ffi.Pointer<glp_iptcp> parm,
);

typedef _dart_glp_init_iptcp = void Function(
  ffi.Pointer<glp_iptcp> parm,
);

typedef _c_glp_ipt_status = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_ipt_status = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_ipt_obj_val = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_ipt_obj_val = double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_ipt_row_prim = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_ipt_row_prim = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_ipt_row_dual = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_ipt_row_dual = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_ipt_col_prim = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_ipt_col_prim = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_ipt_col_dual = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_ipt_col_dual = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_set_col_kind = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
  ffi.Int32 kind,
);

typedef _dart_glp_set_col_kind = void Function(
  ffi.Pointer<glp_prob> P,
  int j,
  int kind,
);

typedef _c_glp_get_col_kind = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_kind = int Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_get_num_int = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_num_int = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_num_bin = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_get_num_bin = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_intopt = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_iocp> parm,
);

typedef _dart_glp_intopt = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_iocp> parm,
);

typedef _c_glp_init_iocp = ffi.Void Function(
  ffi.Pointer<glp_iocp> parm,
);

typedef _dart_glp_init_iocp = void Function(
  ffi.Pointer<glp_iocp> parm,
);

typedef _c_glp_mip_status = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_mip_status = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_mip_obj_val = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_mip_obj_val = double Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_mip_row_val = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_mip_row_val = double Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_mip_col_val = ffi.Double Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_mip_col_val = double Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_check_kkt = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 sol,
  ffi.Int32 cond,
  ffi.Pointer<ffi.Double> ae_max,
  ffi.Pointer<ffi.Int32> ae_ind,
  ffi.Pointer<ffi.Double> re_max,
  ffi.Pointer<ffi.Int32> re_ind,
);

typedef _dart_glp_check_kkt = void Function(
  ffi.Pointer<glp_prob> P,
  int sol,
  int cond,
  ffi.Pointer<ffi.Double> ae_max,
  ffi.Pointer<ffi.Int32> ae_ind,
  ffi.Pointer<ffi.Double> re_max,
  ffi.Pointer<ffi.Int32> re_ind,
);

typedef _c_glp_print_sol = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_print_sol = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_sol = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_sol = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_sol = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_sol = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_print_ranges = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> list,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_print_ranges = int Function(
  ffi.Pointer<glp_prob> P,
  int len,
  ffi.Pointer<ffi.Int32> list,
  int flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_print_ipt = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_print_ipt = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_ipt = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_ipt = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_ipt = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_ipt = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_print_mip = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_print_mip = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_mip = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_mip = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_mip = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_mip = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_bf_exists = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_bf_exists = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_factorize = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_factorize = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_bf_updated = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_bf_updated = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_get_bfcp = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_bfcp> parm,
);

typedef _dart_glp_get_bfcp = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_bfcp> parm,
);

typedef _c_glp_set_bfcp = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_bfcp> parm,
);

typedef _dart_glp_set_bfcp = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_bfcp> parm,
);

typedef _c_glp_get_bhead = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 k,
);

typedef _dart_glp_get_bhead = int Function(
  ffi.Pointer<glp_prob> P,
  int k,
);

typedef _c_glp_get_row_bind = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 i,
);

typedef _dart_glp_get_row_bind = int Function(
  ffi.Pointer<glp_prob> P,
  int i,
);

typedef _c_glp_get_col_bind = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 j,
);

typedef _dart_glp_get_col_bind = int Function(
  ffi.Pointer<glp_prob> P,
  int j,
);

typedef _c_glp_ftran = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Double> x,
);

typedef _dart_glp_ftran = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Double> x,
);

typedef _c_glp_btran = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Double> x,
);

typedef _dart_glp_btran = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Double> x,
);

typedef _c_glp_warm_up = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_warm_up = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_eval_tab_row = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 k,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_eval_tab_row = int Function(
  ffi.Pointer<glp_prob> P,
  int k,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_eval_tab_col = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 k,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_eval_tab_col = int Function(
  ffi.Pointer<glp_prob> P,
  int k,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_transform_row = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_transform_row = int Function(
  ffi.Pointer<glp_prob> P,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_transform_col = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _dart_glp_transform_col = int Function(
  ffi.Pointer<glp_prob> P,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
);

typedef _c_glp_prim_rtest = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  ffi.Int32 dir,
  ffi.Double eps,
);

typedef _dart_glp_prim_rtest = int Function(
  ffi.Pointer<glp_prob> P,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  int dir,
  double eps,
);

typedef _c_glp_dual_rtest = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  ffi.Int32 dir,
  ffi.Double eps,
);

typedef _dart_glp_dual_rtest = int Function(
  ffi.Pointer<glp_prob> P,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  int dir,
  double eps,
);

typedef _c_glp_analyze_bound = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 k,
  ffi.Pointer<ffi.Double> value1,
  ffi.Pointer<ffi.Int32> var1,
  ffi.Pointer<ffi.Double> value2,
  ffi.Pointer<ffi.Int32> var2,
);

typedef _dart_glp_analyze_bound = void Function(
  ffi.Pointer<glp_prob> P,
  int k,
  ffi.Pointer<ffi.Double> value1,
  ffi.Pointer<ffi.Int32> var1,
  ffi.Pointer<ffi.Double> value2,
  ffi.Pointer<ffi.Int32> var2,
);

typedef _c_glp_analyze_coef = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 k,
  ffi.Pointer<ffi.Double> coef1,
  ffi.Pointer<ffi.Int32> var1,
  ffi.Pointer<ffi.Double> value1,
  ffi.Pointer<ffi.Double> coef2,
  ffi.Pointer<ffi.Int32> var2,
  ffi.Pointer<ffi.Double> value2,
);

typedef _dart_glp_analyze_coef = void Function(
  ffi.Pointer<glp_prob> P,
  int k,
  ffi.Pointer<ffi.Double> coef1,
  ffi.Pointer<ffi.Int32> var1,
  ffi.Pointer<ffi.Double> value1,
  ffi.Pointer<ffi.Double> coef2,
  ffi.Pointer<ffi.Int32> var2,
  ffi.Pointer<ffi.Double> value2,
);

typedef _c_glp_npp_alloc_wksp = ffi.Pointer<glp_prep> Function();

typedef _dart_glp_npp_alloc_wksp = ffi.Pointer<glp_prep> Function();

typedef _c_glp_npp_load_prob = ffi.Void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> P,
  ffi.Int32 sol,
  ffi.Int32 names,
);

typedef _dart_glp_npp_load_prob = void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> P,
  int sol,
  int names,
);

typedef _c_glp_npp_preprocess1 = ffi.Int32 Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Int32 hard,
);

typedef _dart_glp_npp_preprocess1 = int Function(
  ffi.Pointer<glp_prep> prep,
  int hard,
);

typedef _c_glp_npp_build_prob = ffi.Void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> Q,
);

typedef _dart_glp_npp_build_prob = void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> Q,
);

typedef _c_glp_npp_postprocess = ffi.Void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> Q,
);

typedef _dart_glp_npp_postprocess = void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> Q,
);

typedef _c_glp_npp_obtain_sol = ffi.Void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_npp_obtain_sol = void Function(
  ffi.Pointer<glp_prep> prep,
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_npp_free_wksp = ffi.Void Function(
  ffi.Pointer<glp_prep> prep,
);

typedef _dart_glp_npp_free_wksp = void Function(
  ffi.Pointer<glp_prep> prep,
);

typedef _c_glp_ios_reason = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_reason = int Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_get_prob = ffi.Pointer<glp_prob> Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_get_prob = ffi.Pointer<glp_prob> Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_tree_size = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Int32> a_cnt,
  ffi.Pointer<ffi.Int32> n_cnt,
  ffi.Pointer<ffi.Int32> t_cnt,
);

typedef _dart_glp_ios_tree_size = void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Int32> a_cnt,
  ffi.Pointer<ffi.Int32> n_cnt,
  ffi.Pointer<ffi.Int32> t_cnt,
);

typedef _c_glp_ios_curr_node = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_curr_node = int Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_next_node = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_next_node = int Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_prev_node = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_prev_node = int Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_up_node = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_up_node = int Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_node_level = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_node_level = int Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_node_bound = ffi.Double Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_node_bound = double Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_best_node = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_best_node = int Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_mip_gap = ffi.Double Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_mip_gap = double Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_node_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_node_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_row_attr = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 i,
  ffi.Pointer<glp_attr> attr,
);

typedef _dart_glp_ios_row_attr = void Function(
  ffi.Pointer<glp_tree> T,
  int i,
  ffi.Pointer<glp_attr> attr,
);

typedef _c_glp_ios_pool_size = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_pool_size = int Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_add_row = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 klass,
  ffi.Int32 flags,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  ffi.Int32 type,
  ffi.Double rhs,
);

typedef _dart_glp_ios_add_row = int Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Int8> name,
  int klass,
  int flags,
  int len,
  ffi.Pointer<ffi.Int32> ind,
  ffi.Pointer<ffi.Double> val,
  int type,
  double rhs,
);

typedef _c_glp_ios_del_row = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 i,
);

typedef _dart_glp_ios_del_row = void Function(
  ffi.Pointer<glp_tree> T,
  int i,
);

typedef _c_glp_ios_clear_pool = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_clear_pool = void Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_ios_can_branch = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 j,
);

typedef _dart_glp_ios_can_branch = int Function(
  ffi.Pointer<glp_tree> T,
  int j,
);

typedef _c_glp_ios_branch_upon = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 j,
  ffi.Int32 sel,
);

typedef _dart_glp_ios_branch_upon = void Function(
  ffi.Pointer<glp_tree> T,
  int j,
  int sel,
);

typedef _c_glp_ios_select_node = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
  ffi.Int32 p,
);

typedef _dart_glp_ios_select_node = void Function(
  ffi.Pointer<glp_tree> T,
  int p,
);

typedef _c_glp_ios_heur_sol = ffi.Int32 Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Double> x,
);

typedef _dart_glp_ios_heur_sol = int Function(
  ffi.Pointer<glp_tree> T,
  ffi.Pointer<ffi.Double> x,
);

typedef _c_glp_ios_terminate = ffi.Void Function(
  ffi.Pointer<glp_tree> T,
);

typedef _dart_glp_ios_terminate = void Function(
  ffi.Pointer<glp_tree> T,
);

typedef _c_glp_init_mpscp = ffi.Void Function(
  ffi.Pointer<glp_mpscp> parm,
);

typedef _dart_glp_init_mpscp = void Function(
  ffi.Pointer<glp_mpscp> parm,
);

typedef _c_glp_read_mps = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 fmt,
  ffi.Pointer<glp_mpscp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_mps = int Function(
  ffi.Pointer<glp_prob> P,
  int fmt,
  ffi.Pointer<glp_mpscp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_mps = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 fmt,
  ffi.Pointer<glp_mpscp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_mps = int Function(
  ffi.Pointer<glp_prob> P,
  int fmt,
  ffi.Pointer<glp_mpscp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_init_cpxcp = ffi.Void Function(
  ffi.Pointer<glp_cpxcp> parm,
);

typedef _dart_glp_init_cpxcp = void Function(
  ffi.Pointer<glp_cpxcp> parm,
);

typedef _c_glp_read_lp = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_cpxcp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_lp = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_cpxcp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_lp = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_cpxcp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_lp = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_cpxcp> parm,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_prob = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_prob = int Function(
  ffi.Pointer<glp_prob> P,
  int flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_prob = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_prob = int Function(
  ffi.Pointer<glp_prob> P,
  int flags,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_mpl_alloc_wksp = ffi.Pointer<glp_tran> Function();

typedef _dart_glp_mpl_alloc_wksp = ffi.Pointer<glp_tran> Function();

typedef _c_glp_mpl_init_rand = ffi.Void Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Int32 seed,
);

typedef _dart_glp_mpl_init_rand = void Function(
  ffi.Pointer<glp_tran> tran,
  int seed,
);

typedef _c_glp_mpl_read_model = ffi.Int32 Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
  ffi.Int32 skip,
);

typedef _dart_glp_mpl_read_model = int Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
  int skip,
);

typedef _c_glp_mpl_read_data = ffi.Int32 Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_mpl_read_data = int Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_mpl_generate = ffi.Int32 Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_mpl_generate = int Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_mpl_build_prob = ffi.Void Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<glp_prob> prob,
);

typedef _dart_glp_mpl_build_prob = void Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<glp_prob> prob,
);

typedef _c_glp_mpl_postsolve = ffi.Int32 Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<glp_prob> prob,
  ffi.Int32 sol,
);

typedef _dart_glp_mpl_postsolve = int Function(
  ffi.Pointer<glp_tran> tran,
  ffi.Pointer<glp_prob> prob,
  int sol,
);

typedef _c_glp_mpl_free_wksp = ffi.Void Function(
  ffi.Pointer<glp_tran> tran,
);

typedef _dart_glp_mpl_free_wksp = void Function(
  ffi.Pointer<glp_tran> tran,
);

typedef _c_glp_read_cnfsat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_cnfsat = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_check_cnfsat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_check_cnfsat = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_write_cnfsat = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_cnfsat = int Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_minisat1 = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
);

typedef _dart_glp_minisat1 = int Function(
  ffi.Pointer<glp_prob> P,
);

typedef _c_glp_intfeas1 = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 use_bound,
  ffi.Int32 obj_bound,
);

typedef _dart_glp_intfeas1 = int Function(
  ffi.Pointer<glp_prob> P,
  int use_bound,
  int obj_bound,
);

typedef _c_glp_init_env = ffi.Int32 Function();

typedef _dart_glp_init_env = int Function();

typedef _c_glp_version = ffi.Pointer<ffi.Int8> Function();

typedef _dart_glp_version = ffi.Pointer<ffi.Int8> Function();

typedef _c_glp_config = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_glp_config = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_glp_free_env = ffi.Int32 Function();

typedef _dart_glp_free_env = int Function();

typedef _c_glp_puts = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_glp_puts = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_glp_printf = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _dart_glp_printf = void Function(
  ffi.Pointer<ffi.Int8> fmt,
);

typedef _c_glp_vprintf = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<va_list_tag> arg,
);

typedef _dart_glp_vprintf = void Function(
  ffi.Pointer<ffi.Int8> fmt,
  ffi.Pointer<va_list_tag> arg,
);

typedef _c_glp_term_out = ffi.Int32 Function(
  ffi.Int32 flag,
);

typedef _dart_glp_term_out = int Function(
  int flag,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_glp_term_hook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> func,
  ffi.Pointer<ffi.Void> info,
);

typedef _dart_glp_term_hook = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> func,
  ffi.Pointer<ffi.Void> info,
);

typedef _c_glp_open_tee = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_open_tee = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_close_tee = ffi.Int32 Function();

typedef _dart_glp_close_tee = int Function();

typedef glp_errfunc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_glp_error_ = ffi.Pointer<ffi.NativeFunction<glp_errfunc>> Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 line,
);

typedef _dart_glp_error_ = ffi.Pointer<ffi.NativeFunction<glp_errfunc>>
    Function(
  ffi.Pointer<ffi.Int8> file,
  int line,
);

typedef _c_glp_at_error = ffi.Int32 Function();

typedef _dart_glp_at_error = int Function();

typedef _c_glp_assert_ = ffi.Void Function(
  ffi.Pointer<ffi.Int8> expr,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 line,
);

typedef _dart_glp_assert_ = void Function(
  ffi.Pointer<ffi.Int8> expr,
  ffi.Pointer<ffi.Int8> file,
  int line,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_glp_error_hook = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> func,
  ffi.Pointer<ffi.Void> info,
);

typedef _dart_glp_error_hook = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> func,
  ffi.Pointer<ffi.Void> info,
);

typedef _c_glp_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 n,
  ffi.Int32 size,
);

typedef _dart_glp_alloc = ffi.Pointer<ffi.Void> Function(
  int n,
  int size,
);

typedef _c_glp_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Int32 n,
  ffi.Int32 size,
);

typedef _dart_glp_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int n,
  int size,
);

typedef _c_glp_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_glp_free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_glp_mem_limit = ffi.Void Function(
  ffi.Int32 limit,
);

typedef _dart_glp_mem_limit = void Function(
  int limit,
);

typedef _c_glp_mem_usage = ffi.Void Function(
  ffi.Pointer<ffi.Int32> count,
  ffi.Pointer<ffi.Int32> cpeak,
  ffi.Pointer<ffi.Uint64> total,
  ffi.Pointer<ffi.Uint64> tpeak,
);

typedef _dart_glp_mem_usage = void Function(
  ffi.Pointer<ffi.Int32> count,
  ffi.Pointer<ffi.Int32> cpeak,
  ffi.Pointer<ffi.Uint64> total,
  ffi.Pointer<ffi.Uint64> tpeak,
);

typedef _c_glp_time = ffi.Double Function();

typedef _dart_glp_time = double Function();

typedef _c_glp_difftime = ffi.Double Function(
  ffi.Double t1,
  ffi.Double t0,
);

typedef _dart_glp_difftime = double Function(
  double t1,
  double t0,
);

typedef _c_glp_create_graph = ffi.Pointer<glp_graph> Function(
  ffi.Int32 v_size,
  ffi.Int32 a_size,
);

typedef _dart_glp_create_graph = ffi.Pointer<glp_graph> Function(
  int v_size,
  int a_size,
);

typedef _c_glp_set_graph_name = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_graph_name = void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_add_vertices = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 nadd,
);

typedef _dart_glp_add_vertices = int Function(
  ffi.Pointer<glp_graph> G,
  int nadd,
);

typedef _c_glp_set_vertex_name = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 i,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_set_vertex_name = void Function(
  ffi.Pointer<glp_graph> G,
  int i,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_add_arc = ffi.Pointer<glp_arc> Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 i,
  ffi.Int32 j,
);

typedef _dart_glp_add_arc = ffi.Pointer<glp_arc> Function(
  ffi.Pointer<glp_graph> G,
  int i,
  int j,
);

typedef _c_glp_del_vertices = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 ndel,
  ffi.Pointer<ffi.Int32> num,
);

typedef _dart_glp_del_vertices = void Function(
  ffi.Pointer<glp_graph> G,
  int ndel,
  ffi.Pointer<ffi.Int32> num,
);

typedef _c_glp_del_arc = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<glp_arc> a,
);

typedef _dart_glp_del_arc = void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<glp_arc> a,
);

typedef _c_glp_erase_graph = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_size,
  ffi.Int32 a_size,
);

typedef _dart_glp_erase_graph = void Function(
  ffi.Pointer<glp_graph> G,
  int v_size,
  int a_size,
);

typedef _c_glp_delete_graph = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _dart_glp_delete_graph = void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _c_glp_create_v_index = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _dart_glp_create_v_index = void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _c_glp_find_vertex = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_glp_find_vertex = int Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_glp_delete_v_index = ffi.Void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _dart_glp_delete_v_index = void Function(
  ffi.Pointer<glp_graph> G,
);

typedef _c_glp_read_graph = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_graph = int Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_graph = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_graph = int Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_mincost_lp = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_graph> G,
  ffi.Int32 names,
  ffi.Int32 v_rhs,
  ffi.Int32 a_low,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
);

typedef _dart_glp_mincost_lp = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_graph> G,
  int names,
  int v_rhs,
  int a_low,
  int a_cap,
  int a_cost,
);

typedef _c_glp_mincost_okalg = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_low,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Double> sol,
  ffi.Int32 a_x,
  ffi.Int32 v_pi,
);

typedef _dart_glp_mincost_okalg = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_low,
  int a_cap,
  int a_cost,
  ffi.Pointer<ffi.Double> sol,
  int a_x,
  int v_pi,
);

typedef _c_glp_mincost_relax4 = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_low,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Int32 crash,
  ffi.Pointer<ffi.Double> sol,
  ffi.Int32 a_x,
  ffi.Int32 a_rc,
);

typedef _dart_glp_mincost_relax4 = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_low,
  int a_cap,
  int a_cost,
  int crash,
  ffi.Pointer<ffi.Double> sol,
  int a_x,
  int a_rc,
);

typedef _c_glp_maxflow_lp = ffi.Void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_graph> G,
  ffi.Int32 names,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 a_cap,
);

typedef _dart_glp_maxflow_lp = void Function(
  ffi.Pointer<glp_prob> P,
  ffi.Pointer<glp_graph> G,
  int names,
  int s,
  int t,
  int a_cap,
);

typedef _c_glp_maxflow_ffalg = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 a_cap,
  ffi.Pointer<ffi.Double> sol,
  ffi.Int32 a_x,
  ffi.Int32 v_cut,
);

typedef _dart_glp_maxflow_ffalg = int Function(
  ffi.Pointer<glp_graph> G,
  int s,
  int t,
  int a_cap,
  ffi.Pointer<ffi.Double> sol,
  int a_x,
  int v_cut,
);

typedef _c_glp_check_asnprob = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_set,
);

typedef _dart_glp_check_asnprob = int Function(
  ffi.Pointer<glp_graph> G,
  int v_set,
);

typedef _c_glp_asnprob_lp = ffi.Int32 Function(
  ffi.Pointer<glp_prob> P,
  ffi.Int32 form,
  ffi.Pointer<glp_graph> G,
  ffi.Int32 names,
  ffi.Int32 v_set,
  ffi.Int32 a_cost,
);

typedef _dart_glp_asnprob_lp = int Function(
  ffi.Pointer<glp_prob> P,
  int form,
  ffi.Pointer<glp_graph> G,
  int names,
  int v_set,
  int a_cost,
);

typedef _c_glp_asnprob_okalg = ffi.Int32 Function(
  ffi.Int32 form,
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_set,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Double> sol,
  ffi.Int32 a_x,
);

typedef _dart_glp_asnprob_okalg = int Function(
  int form,
  ffi.Pointer<glp_graph> G,
  int v_set,
  int a_cost,
  ffi.Pointer<ffi.Double> sol,
  int a_x,
);

typedef _c_glp_asnprob_hall = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_set,
  ffi.Int32 a_x,
);

typedef _dart_glp_asnprob_hall = int Function(
  ffi.Pointer<glp_graph> G,
  int v_set,
  int a_x,
);

typedef _c_glp_cpp = ffi.Double Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_t,
  ffi.Int32 v_es,
  ffi.Int32 v_ls,
);

typedef _dart_glp_cpp = double Function(
  ffi.Pointer<glp_graph> G,
  int v_t,
  int v_es,
  int v_ls,
);

typedef _c_glp_read_mincost = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_low,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_mincost = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_low,
  int a_cap,
  int a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_mincost = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_low,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_mincost = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_low,
  int a_cap,
  int a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_maxflow = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int32> s,
  ffi.Pointer<ffi.Int32> t,
  ffi.Int32 a_cap,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_maxflow = int Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int32> s,
  ffi.Pointer<ffi.Int32> t,
  int a_cap,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_maxflow = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Int32 a_cap,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_maxflow = int Function(
  ffi.Pointer<glp_graph> G,
  int s,
  int t,
  int a_cap,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_asnprob = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_set,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_asnprob = int Function(
  ffi.Pointer<glp_graph> G,
  int v_set,
  int a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_asnprob = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_set,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_asnprob = int Function(
  ffi.Pointer<glp_graph> G,
  int v_set,
  int a_cost,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_read_ccdata = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_wgt,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_read_ccdata = int Function(
  ffi.Pointer<glp_graph> G,
  int v_wgt,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_write_ccdata = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_wgt,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart_glp_write_ccdata = int Function(
  ffi.Pointer<glp_graph> G,
  int v_wgt,
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c_glp_netgen = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _dart_glp_netgen = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_cap,
  int a_cost,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _c_glp_netgen_prob = ffi.Void Function(
  ffi.Int32 nprob,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _dart_glp_netgen_prob = void Function(
  int nprob,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _c_glp_gridgen = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_rhs,
  ffi.Int32 a_cap,
  ffi.Int32 a_cost,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _dart_glp_gridgen = int Function(
  ffi.Pointer<glp_graph> G,
  int v_rhs,
  int a_cap,
  int a_cost,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _c_glp_rmfgen = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int32> s,
  ffi.Pointer<ffi.Int32> t,
  ffi.Int32 a_cap,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _dart_glp_rmfgen = int Function(
  ffi.Pointer<glp_graph> G,
  ffi.Pointer<ffi.Int32> s,
  ffi.Pointer<ffi.Int32> t,
  int a_cap,
  ffi.Pointer<ffi.Int32> parm,
);

typedef _c_glp_weak_comp = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_num,
);

typedef _dart_glp_weak_comp = int Function(
  ffi.Pointer<glp_graph> G,
  int v_num,
);

typedef _c_glp_strong_comp = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_num,
);

typedef _dart_glp_strong_comp = int Function(
  ffi.Pointer<glp_graph> G,
  int v_num,
);

typedef _c_glp_top_sort = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_num,
);

typedef _dart_glp_top_sort = int Function(
  ffi.Pointer<glp_graph> G,
  int v_num,
);

typedef _c_glp_wclique_exact = ffi.Int32 Function(
  ffi.Pointer<glp_graph> G,
  ffi.Int32 v_wgt,
  ffi.Pointer<ffi.Double> sol,
  ffi.Int32 v_set,
);

typedef _dart_glp_wclique_exact = int Function(
  ffi.Pointer<glp_graph> G,
  int v_wgt,
  ffi.Pointer<ffi.Double> sol,
  int v_set,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<glp_tree>,
  ffi.Pointer<ffi.Void>,
);
